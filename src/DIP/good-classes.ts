// ‚úÖ –•–û–†–û–®–û: –°–æ–±–ª—é–¥–µ–Ω–∏–µ DIP - –∫–ª–∞—Å—Å—ã –∑–∞–≤–∏—Å—è—Ç –æ—Ç –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–π, –∞ –Ω–µ –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π
//
// üîÑ –û–°–ù–û–í–ù–ê–Ø –ò–î–ï–Ø DIP:
// 1. ‚úÖ –í–´–°–û–ö–û–£–†–û–í–ù–ï–í–´–ï –ú–û–î–£–õ–ò –ù–ï –ó–ê–í–ò–°–Ø–¢ –û–¢ –ù–ò–ó–ö–û–£–†–û–í–ù–ï–í–´–•
//    - GoodShapeCalculator –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Shape (–∞–±—Å—Ç—Ä–∞–∫—Ü–∏—è)
//    - –ù–ï –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤ Circle, Rectangle
//
// 2. ‚úÖ –û–ë–ê –¢–ò–ü–ê –ó–ê–í–ò–°–Ø–¢ –û–¢ –ê–ë–°–¢–†–ê–ö–¶–ò–ô
//    - –í—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–µ –º–æ–¥—É–ª–∏: GoodShapeCalculator –∑–∞–≤–∏—Å–∏—Ç –æ—Ç Shape
//    - –ù–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–µ –º–æ–¥—É–ª–∏: Circle, Rectangle —Ä–µ–∞–ª–∏–∑—É—é—Ç Shape
//
// –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê:
// 1. –°–ª–∞–±–∞—è —Å–≤—è–∑–∞–Ω–Ω–æ—Å—Ç—å - –∫–ª–∞—Å—Å—ã –∑–∞–≤–∏—Å—è—Ç –æ—Ç –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–π
// 2. –õ–µ–≥–∫–æ—Å—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –º–æ–∂–Ω–æ –ª–µ–≥–∫–æ –∑–∞–º–µ–Ω–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
// 3. –ü—Ä–æ—Å—Ç–æ—Ç–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–∏–ø–æ–≤ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–¥–∞

// ‚úÖ DIP: –ê–±—Å—Ç—Ä–∞–∫—Ü–∏—è (–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å) - –≤—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–µ –º–æ–¥—É–ª–∏ –∑–∞–≤–∏—Å—è—Ç –æ—Ç –Ω–µ—ë
interface Shape {
    getArea(): number;
    getInfo(): string;
}

// ‚úÖ DIP: –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ - –Ω–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–µ –º–æ–¥—É–ª–∏ —Ä–µ–∞–ª–∏–∑—É—é—Ç –∞–±—Å—Ç—Ä–∞–∫—Ü–∏—é
class Circle implements Shape {
    constructor(private radius: number) {}

    getArea(): number {
        return Math.PI * this.radius * this.radius;
    }

    getInfo(): string {
        return `Circle: radius=${this.radius}`;
    }
}

class Rectangle implements Shape {
    constructor(private width: number, private height: number) {}

    getArea(): number {
        return this.width * this.height;
    }

    getInfo(): string {
        return `Rectangle: ${this.width}x${this.height}`;
    }
}

// ‚úÖ DIP: –í—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –º–æ–¥—É–ª—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–∏
class ShapeCalculator {
    // ‚úÖ DIP: –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–∏, –∞ –Ω–µ –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤
    constructor(private shapes: Shape[]) {}

    // ‚úÖ DIP: –ú–µ—Ç–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–µ–π Shape, –∞ –Ω–µ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏
    calculateAllAreas(): number[] {
        return this.shapes.map(shape => shape.getArea());
    }

    displayAllInfo(): void {
        this.shapes.forEach(shape => {
            console.log(`${shape.getInfo()} - Area: ${shape.getArea().toFixed(2)}`);
        });
    }

    findLargestShape(): Shape | null {
        if (this.shapes.length === 0) return null;
        
        return this.shapes.reduce((largest, current) => {
            return current.getArea() > largest.getArea() ? current : largest;
        });
    }
}

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ - –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è DIP

// –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–≥—É—Ä (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä)
const circle = new Circle(5);
const rectangle = new Rectangle(4, 6);

// ‚úÖ DIP: –í—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –º–æ–¥—É–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –∞–±—Å—Ç—Ä–∞–∫—Ü–∏—è–º–∏
const calculator = new ShapeCalculator([circle, rectangle]);

calculator.displayAllInfo();

const largestShape = calculator.findLargestShape();

const areas = calculator.calculateAllAreas();

export {};
