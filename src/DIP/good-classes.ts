// ‚úÖ –•–û–†–û–®–û: –°–æ–±–ª—é–¥–µ–Ω–∏–µ DIP - –∫–ª–∞—Å—Å—ã –∑–∞–≤–∏—Å—è—Ç –æ—Ç –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–π, –∞ –Ω–µ –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π
//
// üîÑ –û–°–ù–û–í–ù–ê–Ø –ò–î–ï–Ø DIP:
// 1. ‚úÖ –í–´–°–û–ö–û–£–†–û–í–ù–ï–í–´–ï –ú–û–î–£–õ–ò –ù–ï –ó–ê–í–ò–°–Ø–¢ –û–¢ –ù–ò–ó–ö–û–£–†–û–í–ù–ï–í–´–•
//    - GoodShapeCalculator –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Shape (–∞–±—Å—Ç—Ä–∞–∫—Ü–∏—è)
//    - –ù–ï –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤ Circle, Rectangle
//
// 2. ‚úÖ –û–ë–ê –¢–ò–ü–ê –ó–ê–í–ò–°–Ø–¢ –û–¢ –ê–ë–°–¢–†–ê–ö–¶–ò–ô
//    - –í—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–µ –º–æ–¥—É–ª–∏: GoodShapeCalculator –∑–∞–≤–∏—Å–∏—Ç –æ—Ç Shape
//    - –ù–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–µ –º–æ–¥—É–ª–∏: Circle, Rectangle —Ä–µ–∞–ª–∏–∑—É—é—Ç Shape
//
// 3. ‚úÖ –ê–ë–°–¢–†–ê–ö–¶–ò–ò –ù–ï –ó–ê–í–ò–°–Ø–¢ –û–¢ –î–ï–¢–ê–õ–ï–ô
//    - –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Shape –Ω–µ –∑–Ω–∞–µ—Ç –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è—Ö
//    - –ê–±—Å—Ç—Ä–∞–∫—Ü–∏—è —Å—Ç–∞–±–∏–ª—å–Ω–∞ –∏ —Ä–µ–¥–∫–æ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è
//
// 4. ‚úÖ –î–ï–¢–ê–õ–ò –ó–ê–í–ò–°–Ø–¢ –û–¢ –ê–ë–°–¢–†–ê–ö–¶–ò–ô
//    - Circle –∏ Rectangle —Ä–µ–∞–ª–∏–∑—É—é—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Shape
//    - –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∫–ª–∞—Å—Å—ã –∑–∞–≤–∏—Å—è—Ç –æ—Ç –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–∏
//
// –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê:
// 1. –°–ª–∞–±–∞—è —Å–≤—è–∑–∞–Ω–Ω–æ—Å—Ç—å - –∫–ª–∞—Å—Å—ã –∑–∞–≤–∏—Å—è—Ç –æ—Ç –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–π
// 2. –õ–µ–≥–∫–æ—Å—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –º–æ–∂–Ω–æ –ª–µ–≥–∫–æ –∑–∞–º–µ–Ω–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
// 3. –ü—Ä–æ—Å—Ç–æ—Ç–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–∏–ø–æ–≤ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–¥–∞
// 4. –ü–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º - –∫–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ª—é–±—ã–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏, —Ä–µ–∞–ª–∏–∑—É—é—â–∏–º–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
// 5. –ò–Ω–≤–µ—Ä—Å–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π - –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –∫ –∞–±—Å—Ç—Ä–∞–∫—Ü–∏—è–º

// ‚úÖ DIP: –ê–±—Å—Ç—Ä–∞–∫—Ü–∏—è (–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å) - –≤—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–µ –º–æ–¥—É–ª–∏ –∑–∞–≤–∏—Å—è—Ç –æ—Ç –Ω–µ—ë
// üí° –ü–†–ï–ò–ú–£–©–ï–°–¢–í–û: –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç, –Ω–æ –Ω–µ –∑–Ω–∞–µ—Ç –æ –¥–µ—Ç–∞–ª—è—Ö —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
// üéØ –†–ï–ó–£–õ–¨–¢–ê–¢: –°—Ç–∞–±–∏–ª—å–Ω–∞—è –∞–±—Å—Ç—Ä–∞–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è —Ä–µ–¥–∫–æ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è
interface Shape {
    getArea(): number;
    getInfo(): string;
}

// ‚úÖ DIP: –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ - –Ω–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–µ –º–æ–¥—É–ª–∏ —Ä–µ–∞–ª–∏–∑—É—é—Ç –∞–±—Å—Ç—Ä–∞–∫—Ü–∏—é
// üí° –ü–†–ï–ò–ú–£–©–ï–°–¢–í–û: –ö–∞–∂–¥—ã–π –∫–ª–∞—Å—Å —Ä–µ–∞–ª–∏–∑—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Shape
// üéØ –†–ï–ó–£–õ–¨–¢–ê–¢: –í—Å–µ —Ñ–∏–≥—É—Ä—ã –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤–æ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
class Circle implements Shape {
    constructor(private radius: number) {}

    getArea(): number {
        return Math.PI * this.radius * this.radius;
    }

    getInfo(): string {
        return `Circle: radius=${this.radius}`;
    }
}

class Rectangle implements Shape {
    constructor(private width: number, private height: number) {}

    getArea(): number {
        return this.width * this.height;
    }

    getInfo(): string {
        return `Rectangle: ${this.width}x${this.height}`;
    }
}

// ‚úÖ DIP: –í—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –º–æ–¥—É–ª—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–∏
// üí° –ü–†–ï–ò–ú–£–©–ï–°–¢–í–û: –ö–ª–∞—Å—Å –Ω–µ –∑–Ω–∞–µ—Ç –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç–∏–ø–∞—Ö —Ñ–∏–≥—É—Ä
// üéØ –†–ï–ó–£–õ–¨–¢–ê–¢: –ú–æ–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –ª—é–±—ã–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏, —Ä–µ–∞–ª–∏–∑—É—é—â–∏–º–∏ Shape
class ShapeCalculator {
    // ‚úÖ DIP: –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–∏, –∞ –Ω–µ –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤
    // üí° –ü–†–ï–ò–ú–£–©–ï–°–¢–í–û: –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –∏–∑–≤–Ω–µ (–∏–Ω—ä–µ–∫—Ü–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)
    // üéØ –†–ï–ó–£–õ–¨–¢–ê–¢: –õ–µ–≥–∫–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å –º–æ–∫-–æ–±—ä–µ–∫—Ç–∞–º–∏
    constructor(private shapes: Shape[]) {}

    // ‚úÖ DIP: –ú–µ—Ç–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–µ–π Shape, –∞ –Ω–µ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏
    // üí° –ü–†–ï–ò–ú–£–©–ï–°–¢–í–û: –ü–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º - —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ª—é–±—ã–º–∏ —Ñ–∏–≥—É—Ä–∞–º–∏
    // üéØ –†–ï–ó–£–õ–¨–¢–ê–¢: –ù–µ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–∏–ø —Ñ–∏–≥—É—Ä—ã
    calculateAllAreas(): number[] {
        return this.shapes.map(shape => shape.getArea());
    }

    findLargestShape(): Shape | null {
        if (this.shapes.length === 0) return null;
        
        return this.shapes.reduce((largest, current) => {
            return current.getArea() > largest.getArea() ? current : largest;
        });
    }

    // ‚úÖ DIP: –õ–µ–≥–∫–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö
    // üí° –ü–†–ï–ò–ú–£–©–ï–°–¢–í–û: –†–∞—Å—à–∏—Ä—è–µ–º–æ—Å—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–¥–∞
    // üéØ –†–ï–ó–£–õ–¨–¢–ê–¢: –ü—Ä–∏–Ω—Ü–∏–ø –æ—Ç–∫—Ä—ã—Ç–æ—Å—Ç–∏/–∑–∞–∫—Ä—ã—Ç–æ—Å—Ç–∏ —Å–æ–±–ª—é–¥–∞–µ—Ç—Å—è
    getTotalArea(): number {
        return this.shapes.reduce((total, shape) => total + shape.getArea(), 0);
    }
}

// ‚úÖ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–†–ï–ò–ú–£–©–ï–°–¢–í: –õ–µ–≥–∫–æ—Å—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
// üí° –ü–†–ï–ò–ú–£–©–ï–°–¢–í–û: –ú–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –º–æ–∫-–æ–±—ä–µ–∫—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
// üéØ –†–ï–ó–£–õ–¨–¢–ê–¢: –ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
class MockShape implements Shape {
    constructor(private area: number, private info: string) {}
    
    getArea(): number { return this.area; }
    getInfo(): string { return this.info; }
}

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ - –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è DIP

// –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–≥—É—Ä (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä)
const circle = new Circle(5);
const rectangle = new Rectangle(4, 6);

// ‚úÖ DIP: –í—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –º–æ–¥—É–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –∞–±—Å—Ç—Ä–∞–∫—Ü–∏—è–º–∏
// üí° –ü–†–ï–ò–ú–£–©–ï–°–¢–í–û: –ù–µ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–∏–ø—ã
// üéØ –†–ï–ó–£–õ–¨–¢–ê–¢: –ì–∏–±–∫–æ—Å—Ç—å –∏ —Ä–∞—Å—à–∏—Ä—è–µ–º–æ—Å—Ç—å
const calculator = new ShapeCalculator([circle, rectangle]);

const largestShape = calculator.findLargestShape();

const areas = calculator.calculateAllAreas();

// ‚úÖ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø: –õ–µ–≥–∫–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ç–∏–ø–æ–≤
// üí° –ü–†–ï–ò–ú–£–©–ï–°–¢–í–û: –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å Triangle –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è ShapeCalculator
// üéØ –†–ï–ó–£–õ–¨–¢–ê–¢: –ü—Ä–∏–Ω—Ü–∏–ø –æ—Ç–∫—Ä—ã—Ç–æ—Å—Ç–∏/–∑–∞–∫—Ä—ã—Ç–æ—Å—Ç–∏ —Å–æ–±–ª—é–¥–∞–µ—Ç—Å—è
class Triangle implements Shape {
    constructor(private side1: number, private side2: number, private side3: number) {}
    
    getArea(): number {
        const s = (this.side1 + this.side2 + this.side3) / 2;
        return Math.sqrt(s * (s - this.side1) * (s - this.side2) * (s - this.side3));
    }
    
    getInfo(): string {
        return `Triangle: ${this.side1},${this.side2},${this.side3}`;
    }
}

// ‚úÖ –ù–æ–≤–∞—è —Ñ–∏–≥—É—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–¥–∞
const triangle = new Triangle(3, 4, 5);
const calculatorWithTriangle = new ShapeCalculator([circle, rectangle, triangle]);

export {};
