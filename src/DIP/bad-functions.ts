// ‚ùå –ü–õ–û–•–û: –ù–∞—Ä—É—à–µ–Ω–∏–µ DIP - —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–≤–∏—Å—è—Ç –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π
//
// 1. ‚ùå –í–´–°–û–ö–û–£–†–û–í–ù–ï–í–´–ï –§–£–ù–ö–¶–ò–ò –ó–ê–í–ò–°–Ø–¢ –û–¢ –ù–ò–ó–ö–û–£–†–û–í–ù–ï–í–´–•
//    - calculateArea –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤ Circle, Rectangle
//    - processShapes —Å–æ–∑–¥–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –≤–Ω—É—Ç—Ä–∏ —Å–µ–±—è
//
// 2. ‚ùå –ù–ï–¢ –ê–ë–°–¢–†–ê–ö–¶–ò–ô
//    - –ù–µ—Ç –æ–±—â–µ–≥–æ —Ç–∏–ø–∞ Shape
//    - –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏
//
// 3. ‚ùå –§–£–ù–ö–¶–ò–ò –°–û–ó–î–ê–Æ–¢ –ó–ê–í–ò–°–ò–ú–û–°–¢–ò –í–ù–£–¢–†–ò –°–ï–ë–Ø
//    - processShapes —Å–æ–∑–¥–∞–µ—Ç Circle –∏ Rectangle –≤–Ω—É—Ç—Ä–∏ —Å–µ–±—è
//    - –ù–µ—Ç –∏–Ω—ä–µ–∫—Ü–∏–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
//
// 4. ‚ùå –°–õ–û–ñ–ù–û–°–¢–¨ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø
//    - –ù–µ–ª—å–∑—è –ª–µ–≥–∫–æ –∑–∞–º–µ–Ω–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–∞ –º–æ–∫–∏
//    - –§—É–Ω–∫—Ü–∏–∏ –∂–µ—Å—Ç–∫–æ —Å–≤—è–∑–∞–Ω—ã —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è–º–∏


// ‚ùå –ù–ê–†–£–®–ï–ù–ò–ï DIP: –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–∏–ø—ã –¥–ª—è —Ñ–∏–≥—É—Ä
// üí° –ß–¢–û –ù–ï –¢–ê–ö: –ù–µ—Ç –æ–±—â–µ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Shape
type Circle = {
  radius: number;
  getArea: () => number;
  getInfo: () => string;
};

type Rectangle = {
  width: number;
  height: number;
  getArea: () => number;
  getInfo: () => string;
};

// ‚ùå –ù–ê–†–£–®–ï–ù–ò–ï DIP: –§—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞—é—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
// üí° –ß–¢–û –ù–ï –¢–ê–ö: –§—É–Ω–∫—Ü–∏–∏ –∑–Ω–∞—é—Ç –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç–∏–ø–∞—Ö
function createCircle(radius: number): Circle {
  return {
    radius,
    getArea: () => Math.PI * radius * radius,
    getInfo: () => `Circle: radius=${radius}`,
  };
}

// ‚ùå –ù–ê–†–£–®–ï–ù–ò–ï DIP: –§—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞—é—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
// üí° –ß–¢–û –ù–ï –¢–ê–ö: –§—É–Ω–∫—Ü–∏–∏ –∑–Ω–∞—é—Ç –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç–∏–ø–∞—Ö
function createRectangle(width: number, height: number): Rectangle {
  return {
    width,
    height,
    getArea: () => width * height,
    getInfo: () => `Rectangle: ${width}x${height}`,
  };
}

// ‚ùå –ù–ê–†–£–®–ï–ù–ò–ï DIP: –§—É–Ω–∫—Ü–∏–∏ –∑–∞–≤–∏—Å—è—Ç –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤
// üí° –ß–¢–û –ù–ï –¢–ê–ö: –í—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –Ω–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã—Ö —Ç–∏–ø–æ–≤
function calculateArea(shape: Circle | Rectangle): number {
  // ‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ù—É–∂–Ω–æ –∑–Ω–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–∏–ø –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
  // üí° –ß–¢–û –ù–ï –¢–ê–ö: –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –ª—é–±—ã–º –æ–±—ä–µ–∫—Ç–æ–º, –∏–º–µ—é—â–∏–º getArea()
  if ("radius" in shape) {
    return shape.getArea(); // Circle
  } else {
    return shape.getArea(); // Rectangle
  }
}

// ‚ùå –ù–ê–†–£–®–ï–ù–ò–ï DIP: –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –≤–Ω—É—Ç—Ä–∏ —Å–µ–±—è
// üí° –ß–¢–û –ù–ï –¢–ê–ö: –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤–Ω—É—Ç—Ä–∏ —Å–µ–±—è
function processShapes(): number {
  // ‚ùå –ü–†–û–ë–õ–ï–ú–ê: –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤–Ω—É—Ç—Ä–∏ —Å–µ–±—è
  // üí° –ß–¢–û –ù–ï –¢–ê–ö: –ù–µ–ª—å–∑—è –ª–µ–≥–∫–æ –∑–∞–º–µ–Ω–∏—Ç—å Circle –Ω–∞ –º–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const circle = createCircle(5);
  const rectangle = createRectangle(4, 6);

  return calculateArea(circle) + calculateArea(rectangle);
}

// ‚ùå –ù–ê–†–£–®–ï–ù–ò–ï DIP: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤
// üí° –ß–¢–û –ù–ï –¢–ê–ö: –ù—É–∂–Ω–æ –∑–Ω–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–∏–ø
function displayShapeInfo(shape: Circle | Rectangle): string {
  // ‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ù—É–∂–Ω–æ –∑–Ω–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–∏–ø
  // üí° –ß–¢–û –ù–ï –¢–ê–ö: –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –ª—é–±—ã–º –æ–±—ä–µ–∫—Ç–æ–º, –∏–º–µ—é—â–∏–º getArea()
  if ("radius" in shape) {
    return `Circle area: ${shape.getArea()}`;
  } else {
    return `Rectangle area: ${shape.getArea()}`;
  }
}

// ‚ùå –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–†–û–ë–õ–ï–ú: –°–ª–æ–∂–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
// üí° –ß–¢–û –ù–ï –¢–ê–ö: –ù–µ–ª—å–∑—è –ª–µ–≥–∫–æ –∑–∞–º–µ–Ω–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–∞ –º–æ–∫–∏
function demonstrateTestingProblems() {
  // ‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ù–µ–ª—å–∑—è –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å –º–æ–∫-–æ–±—ä–µ–∫—Ç–∞–º–∏
  // const mockCircle = { radius: 1, getArea: () => 10, getInfo: () => 'Mock' };
  // processShapes(); // –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –º–æ–∫-–æ–±—ä–µ–∫—Ç—ã
}

// ‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ª–µ–≥–∫–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ñ–∏–≥—É—Ä—É
// üí° –ß–¢–û –ù–ï –¢–ê–ö: –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è Triangle –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏
// type Triangle = {
//     side1: number;
//     side2: number;
//     side3: number;
//     getArea: () => number;
//     getInfo: () => string;
// };
//
// function calculateArea(shape: Circle | Rectangle | Triangle): number {
//     // –ü—Ä–∏—à–ª–æ—Å—å –±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–∏–ø–∞
// }

export {};
