// ‚ùå –ü–õ–û–•–û: –ù–∞—Ä—É—à–µ–Ω–∏–µ DIP - —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–≤–∏—Å—è—Ç –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π, –∞ –Ω–µ –æ—Ç –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–π
//
// üîÑ –ù–ê–†–£–®–ï–ù–ò–ï –û–°–ù–û–í–ù–û–ô –ò–î–ï–ò DIP:
// 1. ‚ùå –í–´–°–û–ö–û–£–†–û–í–ù–ï–í–´–ï –ú–û–î–£–õ–ò –ó–ê–í–ò–°–Ø–¢ –û–¢ –ù–ò–ó–ö–û–£–†–û–í–ù–ï–í–´–•
//    - badCalculateCircleArea (–≤—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤–∞—è) –∑–∞–≤–∏—Å–∏—Ç –æ—Ç Circle (–Ω–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π)
//    - badProcessAllShapes (–≤—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤–∞—è) —Å–æ–∑–¥–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã: badCreateCircle(), badCreateRectangle()
//
// 2. ‚ùå –ù–ï –û–ë–ê –¢–ò–ü–ê –ó–ê–í–ò–°–Ø–¢ –û–¢ –ê–ë–°–¢–†–ê–ö–¶–ò–ô
//    - –í—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: badCalculateCircleArea –∑–∞–≤–∏—Å–∏—Ç –æ—Ç Circle, FileStorage (–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ)
//    - –ù–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: badCreateCircle, badCreateRectangle –ù–ï –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç –æ–±—â–∏–π —Ç–∏–ø
//
// 3. ‚ùå –ê–ë–°–¢–†–ê–ö–¶–ò–ò –ó–ê–í–ò–°–Ø–¢ –û–¢ –î–ï–¢–ê–õ–ï–ô (–∏—Ö –ø—Ä–æ—Å—Ç–æ –Ω–µ—Ç!)
//    - –ù–µ—Ç —Ç–∏–ø–æ–≤ Shape, Storage, Display
//    - –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —Ç–∏–ø–∞–º
//
// 4. ‚ùå –î–ï–¢–ê–õ–ò –ù–ï –ó–ê–í–ò–°–Ø–¢ –û–¢ –ê–ë–°–¢–†–ê–ö–¶–ò–ô
//    - badCreateCircle, badCreateRectangle –ù–ï –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç –æ–±—â–∏–π —Ç–∏–ø
//    - badCreateFileStorage, badCreateDatabaseStorage –ù–ï –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç –æ–±—â–∏–π —Ç–∏–ø
//
// –ü–†–û–ë–õ–ï–ú–´:
// 1. –ñ–µ—Å—Ç–∫–∞—è —Å–≤—è–∑–∞–Ω–Ω–æ—Å—Ç—å - —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–≤–∏—Å—è—Ç –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤
// 2. –ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø–∞ –∏–Ω–≤–µ—Ä—Å–∏–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π - –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è–º
// 3. –°–ª–æ–∂–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –Ω–µ–ª—å–∑—è –ª–µ–≥–∫–æ –∑–∞–º–µ–Ω–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
// 4. –ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø–∞ –æ—Ç–∫—Ä—ã—Ç–æ—Å—Ç–∏/–∑–∞–∫—Ä—ã—Ç–æ—Å—Ç–∏ - –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö –≤–ª–∏—è—é—Ç –Ω–∞ —Ñ—É–Ω–∫—Ü–∏–∏
// 5. –°–ª–æ–∂–Ω–æ—Å—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–∏–ø–æ–≤ —Ç—Ä–µ–±—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π

// ‚ùå –ù–ê–†–£–®–ï–ù–ò–ï DIP: –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–∏–ø—ã –¥–ª—è —Ñ–∏–≥—É—Ä
// üîÑ –ü–†–û–ë–õ–ï–ú–ê: –ù–µ—Ç –æ–±—â–µ–≥–æ —Ç–∏–ø–∞ - –¥–µ—Ç–∞–ª–∏ –Ω–µ –∑–∞–≤–∏—Å—è—Ç –æ—Ç –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–π
type Circle = {
    type: 'circle';
    radius: number;
    getArea: () => number;
    getPerimeter: () => number;
    getInfo: () => string;
};

type Rectangle = {
    type: 'rectangle';
    width: number;
    height: number;
    getArea: () => number;
    getPerimeter: () => number;
    getInfo: () => string;
};

type Triangle = {
    type: 'triangle';
    side1: number;
    side2: number;
    side3: number;
    getArea: () => number;
    getPerimeter: () => number;
    getInfo: () => string;
};

// ‚ùå –ù–ê–†–£–®–ï–ù–ò–ï DIP: –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–∏–ø—ã –¥–ª—è —Ö—Ä–∞–Ω–∏–ª–∏—â
type FileStorage = {
    type: 'file';
    saveToFile: (data: string) => void;
};

type DatabaseStorage = {
    type: 'database';
    saveToDatabase: (data: string) => void;
};

type CloudStorage = {
    type: 'cloud';
    saveToCloud: (data: string) => void;
};

// ‚ùå –ù–ê–†–£–®–ï–ù–ò–ï DIP: –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–∏–ø—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
type ConsoleDisplay = {
    type: 'console';
    display: (data: string) => void;
};

type HTMLDisplay = {
    type: 'html';
    display: (data: string) => void;
};

type PDFDisplay = {
    type: 'pdf';
    display: (data: string) => void;
};

// ‚ùå –ù–ê–†–£–®–ï–ù–ò–ï DIP: –§–∞–±—Ä–∏—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞—é—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
// üîÑ –ü–†–û–ë–õ–ï–ú–ê: –ù–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ù–ï –∑–∞–≤–∏—Å—è—Ç –æ—Ç –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–π
function badCreateCircle(radius: number): Circle {
    return {
        type: 'circle',
        radius,
        getArea: () => Math.PI * radius * radius,
        getPerimeter: () => 2 * Math.PI * radius,
        getInfo: () => `Circle: radius=${radius}`
    };
}

function badCreateRectangle(width: number, height: number): Rectangle {
    return {
        type: 'rectangle',
        width,
        height,
        getArea: () => width * height,
        getPerimeter: () => 2 * (width + height),
        getInfo: () => `Rectangle: ${width}x${height}`
    };
}

function badCreateTriangle(side1: number, side2: number, side3: number): Triangle {
    const perimeter = side1 + side2 + side3;
    const s = perimeter / 2;
    const area = Math.sqrt(s * (s - side1) * (s - side2) * (s - side3));
    
    return {
        type: 'triangle',
        side1,
        side2,
        side3,
        getArea: () => area,
        getPerimeter: () => perimeter,
        getInfo: () => `Triangle: sides=${side1},${side2},${side3}`
    };
}

// ‚ùå –ù–ê–†–£–®–ï–ù–ò–ï DIP: –§—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞—é—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
function badCreateFileStorage(): FileStorage {
    return {
        type: 'file',
        saveToFile: (data: string) => console.log(`Saving to file: ${data}`)
    };
}

function badCreateDatabaseStorage(): DatabaseStorage {
    return {
        type: 'database',
        saveToDatabase: (data: string) => console.log(`Saving to database: ${data}`)
    };
}

function badCreateCloudStorage(): CloudStorage {
    return {
        type: 'cloud',
        saveToCloud: (data: string) => console.log(`Saving to cloud: ${data}`)
    };
}

// ‚ùå –ù–ê–†–£–®–ï–ù–ò–ï DIP: –§—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞—é—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
function badCreateConsoleDisplay(): ConsoleDisplay {
    return {
        type: 'console',
        display: (data: string) => console.log(`Console: ${data}`)
    };
}

function badCreateHTMLDisplay(): HTMLDisplay {
    return {
        type: 'html',
        display: (data: string) => console.log(`HTML: ${data}`)
    };
}

function badCreatePDFDisplay(): PDFDisplay {
    return {
        type: 'pdf',
        display: (data: string) => console.log(`PDF: ${data}`)
    };
}

// ‚ùå –ù–ê–†–£–®–ï–ù–ò–ï DIP: –§—É–Ω–∫—Ü–∏–∏ –∑–∞–≤–∏—Å—è—Ç –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤
// üîÑ –ü–†–û–ë–õ–ï–ú–ê: –í—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–≤–∏—Å—è—Ç –æ—Ç –Ω–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã—Ö

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø–ª–æ—â–∞–¥–∏ –∫—Ä—É–≥–∞ - –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ Circle
// üîÑ –ù–ê–†–£–®–ï–ù–ò–ï: –í—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –º–æ–¥—É–ª—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –Ω–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤–æ–≥–æ
function badCalculateCircleArea(circle: Circle): void {
    const area = circle.getArea();
    const perimeter = circle.getPerimeter();
    const info = circle.getInfo();
    
    // ‚ùå –ü–†–û–ë–õ–ï–ú–ê: –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤–Ω—É—Ç—Ä–∏ —Å–µ–±—è
    // üîÑ –ù–ê–†–£–®–ï–ù–ò–ï: –í—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –º–æ–¥—É–ª—å —Å–æ–∑–¥–∞–µ—Ç –Ω–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–µ –º–æ–¥—É–ª–∏
    const fileStorage = badCreateFileStorage();
    const databaseStorage = badCreateDatabaseStorage();
    const consoleDisplay = badCreateConsoleDisplay();
    
    const result = `${info} - Area: ${area.toFixed(2)}, Perimeter: ${perimeter.toFixed(2)}`;
    
    fileStorage.saveToFile(result);
    databaseStorage.saveToDatabase(result);
    consoleDisplay.display(result);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø–ª–æ—â–∞–¥–∏ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ - –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ Rectangle
function badCalculateRectangleArea(rectangle: Rectangle): void {
    const area = rectangle.getArea();
    const perimeter = rectangle.getPerimeter();
    const info = rectangle.getInfo();
    
    // ‚ùå –ü–†–û–ë–õ–ï–ú–ê: –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤–Ω—É—Ç—Ä–∏ —Å–µ–±—è
    const fileStorage = badCreateFileStorage();
    const databaseStorage = badCreateDatabaseStorage();
    const consoleDisplay = badCreateConsoleDisplay();
    
    const result = `${info} - Area: ${area.toFixed(2)}, Perimeter: ${perimeter.toFixed(2)}`;
    
    fileStorage.saveToFile(result);
    databaseStorage.saveToDatabase(result);
    consoleDisplay.display(result);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø–ª–æ—â–∞–¥–∏ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ - –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ Triangle
function badCalculateTriangleArea(triangle: Triangle): void {
    const area = triangle.getArea();
    const perimeter = triangle.getPerimeter();
    const info = triangle.getInfo();
    
    // ‚ùå –ü–†–û–ë–õ–ï–ú–ê: –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤–Ω—É—Ç—Ä–∏ —Å–µ–±—è
    const fileStorage = badCreateFileStorage();
    const databaseStorage = badCreateDatabaseStorage();
    const consoleDisplay = badCreateConsoleDisplay();
    
    const result = `${info} - Area: ${area.toFixed(2)}, Perimeter: ${perimeter.toFixed(2)}`;
    
    fileStorage.saveToFile(result);
    databaseStorage.saveToDatabase(result);
    consoleDisplay.display(result);
}

// ‚ùå –ù–ê–†–£–®–ï–ù–ò–ï DIP: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Ñ–∏–≥—É—Ä –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤
function badProcessAllShapes(): void {
    // ‚ùå –ü–†–û–ë–õ–ï–ú–ê: –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –≤–Ω—É—Ç—Ä–∏ —Å–µ–±—è
    const circle = badCreateCircle(5);
    const rectangle = badCreateRectangle(4, 6);
    const triangle = badCreateTriangle(3, 4, 5);
    
    const fileStorage = badCreateFileStorage();
    const databaseStorage = badCreateDatabaseStorage();
    const consoleDisplay = badCreateConsoleDisplay();
    
    // ‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ù—É–∂–Ω–æ –∑–Ω–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–∏–ø—ã –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    badCalculateCircleArea(circle);
    badCalculateRectangleArea(rectangle);
    badCalculateTriangleArea(triangle);
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
    fileStorage.saveToFile(circle.getInfo());
    fileStorage.saveToFile(rectangle.getInfo());
    fileStorage.saveToFile(triangle.getInfo());
    
    databaseStorage.saveToDatabase(circle.getInfo());
    databaseStorage.saveToDatabase(rectangle.getInfo());
    databaseStorage.saveToDatabase(triangle.getInfo());
    
    consoleDisplay.display(circle.getInfo());
    consoleDisplay.display(rectangle.getInfo());
    consoleDisplay.display(triangle.getInfo());
}

// ‚ùå –ù–ê–†–£–®–ï–ù–ò–ï DIP: –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ñ–∏–≥—É—Ä –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤
function badCompareShapes(): void {
    // ‚ùå –ü–†–û–ë–õ–ï–ú–ê: –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –≤–Ω—É—Ç—Ä–∏ —Å–µ–±—è
    const circle = badCreateCircle(5);
    const rectangle = badCreateRectangle(4, 6);
    const triangle = badCreateTriangle(3, 4, 5);
    
    const fileStorage = badCreateFileStorage();
    const consoleDisplay = badCreateConsoleDisplay();
    
    const shapes = [circle, rectangle, triangle];
    
    // ‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ù—É–∂–Ω–æ –∑–Ω–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–∏–ø—ã –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    shapes.forEach((shape, index) => {
        if (shape.type === 'circle') {
            const circleShape = shape as Circle;
            fileStorage.saveToFile(`Circle ${index + 1}: ${circleShape.getInfo()}`);
            consoleDisplay.display(`Circle ${index + 1}: ${circleShape.getInfo()}`);
        } else if (shape.type === 'rectangle') {
            const rectangleShape = shape as Rectangle;
            fileStorage.saveToFile(`Rectangle ${index + 1}: ${rectangleShape.getInfo()}`);
            consoleDisplay.display(`Rectangle ${index + 1}: ${rectangleShape.getInfo()}`);
        } else if (shape.type === 'triangle') {
            const triangleShape = shape as Triangle;
            fileStorage.saveToFile(`Triangle ${index + 1}: ${triangleShape.getInfo()}`);
            consoleDisplay.display(`Triangle ${index + 1}: ${triangleShape.getInfo()}`);
        }
    });
    
    // –ù–∞—Ö–æ–¥–∏–º —Ñ–∏–≥—É—Ä—É —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø–ª–æ—â–∞–¥—å—é
    const largestShape = shapes.reduce((largest, current) => {
        return current.getArea() > largest.getArea() ? current : largest;
    });
    
    const largestInfo = `Largest shape: ${largestShape.getInfo()} - Area: ${largestShape.getArea().toFixed(2)}`;
    fileStorage.saveToFile(largestInfo);
    consoleDisplay.display(largestInfo);
}

// ‚ùå –ù–ê–†–£–®–ï–ù–ò–ï DIP: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤
function badGenerateReport(): void {
    // ‚ùå –ü–†–û–ë–õ–ï–ú–ê: –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –≤–Ω—É—Ç—Ä–∏ —Å–µ–±—è
    const circle = badCreateCircle(5);
    const rectangle = badCreateRectangle(4, 6);
    const triangle = badCreateTriangle(3, 4, 5);
    
    const cloudStorage = badCreateCloudStorage();
    const pdfDisplay = badCreatePDFDisplay();
    
    const shapes = [circle, rectangle, triangle];
    
    const report = `
        Shape Report:
        ${shapes.map((shape, index) => 
            `${index + 1}. ${shape.getInfo()}: Area = ${shape.getArea().toFixed(2)}, Perimeter = ${shape.getPerimeter().toFixed(2)}`
        ).join('\n        ')}
        
        Total shapes: ${shapes.length}
        Total area: ${shapes.reduce((sum, shape) => sum + shape.getArea(), 0).toFixed(2)}
    `;
    
    cloudStorage.saveToCloud(report);
    pdfDisplay.display(report);
}

// ‚ùå –ù–ê–†–£–®–ï–ù–ò–ï DIP: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–∏–≥—É—Ä –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤
function badValidateShapes(): void {
    // ‚ùå –ü–†–û–ë–õ–ï–ú–ê: –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –≤–Ω—É—Ç—Ä–∏ —Å–µ–±—è
    const circle = badCreateCircle(5);
    const rectangle = badCreateRectangle(4, 6);
    const triangle = badCreateTriangle(3, 4, 5);
    
    const shapes = [circle, rectangle, triangle];
    
    // ‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ù—É–∂–Ω–æ –∑–Ω–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–∏–ø—ã –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    shapes.forEach(shape => {
        if (shape.type === 'circle') {
            const circleShape = shape as Circle;
            const isValid = circleShape.radius > 0 && circleShape.radius <= 1000;
            console.log(`Circle validation: ${isValid ? 'PASS' : 'FAIL'}`);
        } else if (shape.type === 'rectangle') {
            const rectangleShape = shape as Rectangle;
            const isValid = rectangleShape.width > 0 && rectangleShape.height > 0 && 
                           rectangleShape.width <= 1000 && rectangleShape.height <= 1000;
            console.log(`Rectangle validation: ${isValid ? 'PASS' : 'FAIL'}`);
        } else if (shape.type === 'triangle') {
            const triangleShape = shape as Triangle;
            const isValid = triangleShape.side1 > 0 && triangleShape.side2 > 0 && triangleShape.side3 > 0;
            console.log(`Triangle validation: ${isValid ? 'PASS' : 'FAIL'}`);
        }
    });
}

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ - –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–±–ª–µ–º
console.log('=== Individual shape processing:');
const circle = badCreateCircle(5);
const rectangle = badCreateRectangle(4, 6);
const triangle = badCreateTriangle(3, 4, 5);

badCalculateCircleArea(circle);
badCalculateRectangleArea(rectangle);
badCalculateTriangleArea(triangle);

console.log('\n=== Processing all shapes:');
badProcessAllShapes();

console.log('\n=== Shape comparison:');
badCompareShapes();

console.log('\n=== Report generation:');
badGenerateReport();

console.log('\n=== Shape validation:');
badValidateShapes(); 