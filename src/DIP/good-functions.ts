// ‚úÖ –•–û–†–û–®–û: –°–æ–±–ª—é–¥–µ–Ω–∏–µ DIP - —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–≤–∏—Å—è—Ç –æ—Ç –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–π, –∞ –Ω–µ –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π
//
// üîÑ –û–°–ù–û–í–ù–ê–Ø –ò–î–ï–Ø DIP:
// 1. ‚úÖ –í–´–°–û–ö–û–£–†–û–í–ù–ï–í–´–ï –§–£–ù–ö–¶–ò–ò –ù–ï –ó–ê–í–ò–°–Ø–¢ –û–¢ –ù–ò–ó–ö–û–£–†–û–í–ù–ï–í–´–•
//    - calculateArea, displayInfo –∑–∞–≤–∏—Å—è—Ç –æ—Ç —Ç–∏–ø–∞ Shape (–∞–±—Å—Ç—Ä–∞–∫—Ü–∏—è)
//    - –ù–ï –∑–∞–≤–∏—Å—è—Ç –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤ Circle, Rectangle
//
// 2. ‚úÖ –û–ë–ê –¢–ò–ü–ê –ó–ê–í–ò–°–Ø–¢ –û–¢ –ê–ë–°–¢–†–ê–ö–¶–ò–ô
//    - –í—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: calculateArea –∑–∞–≤–∏—Å–∏—Ç –æ—Ç Shape
//    - –ù–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: createCircle, createRectangle –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç Shape
//
// –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê:
// 1. –°–ª–∞–±–∞—è —Å–≤—è–∑–∞–Ω–Ω–æ—Å—Ç—å - —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–≤–∏—Å—è—Ç –æ—Ç –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–π
// 2. –õ–µ–≥–∫–æ—Å—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –º–æ–∂–Ω–æ –ª–µ–≥–∫–æ –∑–∞–º–µ–Ω–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
// 3. –ü—Ä–æ—Å—Ç–æ—Ç–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–∏–ø–æ–≤ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π

// ‚úÖ DIP: –ê–±—Å—Ç—Ä–∞–∫—Ü–∏—è (—Ç–∏–ø) - –≤—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–≤–∏—Å—è—Ç –æ—Ç –Ω–µ—ë
type Shape = {
    getArea: () => number;
    getInfo: () => string;
};

// ‚úÖ DIP: –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ - –Ω–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞—é—Ç –æ–±—ä–µ–∫—Ç—ã
function createCircle(radius: number): Shape {
    return {
        getArea: () => Math.PI * radius * radius,
        getInfo: () => `Circle: radius=${radius}`
    };
}

function createRectangle(width: number, height: number): Shape {
    return {
        getArea: () => width * height,
        getInfo: () => `Rectangle: ${width}x${height}`
    };
}

// ‚úÖ DIP: –í—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–≤–∏—Å—è—Ç –æ—Ç –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–∏
// üîÑ –ü–†–ò–ù–¶–ò–ü: –í—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ –¥–æ–ª–∂–Ω—ã –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç –Ω–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã—Ö
function calculateArea(shape: Shape): number {
    // ‚úÖ –†–∞–±–æ—Ç–∞–µ–º —Å –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–µ–π Shape, –∞ –Ω–µ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏
    return shape.getArea();
}

function displayShapeInfo(shape: Shape): void {
    // ‚úÖ –†–∞–±–æ—Ç–∞–µ–º —Å –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–µ–π Shape, –∞ –Ω–µ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏
    console.log(`${shape.getInfo()} - Area: ${shape.getArea().toFixed(2)}`);
}

function findLargestShape(shapes: Shape[]): Shape | null {
    if (shapes.length === 0) return null;
    
    return shapes.reduce((largest, current) => {
        return current.getArea() > largest.getArea() ? current : largest;
    });
}

// ‚úÖ DIP: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∏–≥—É—Ä - –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–π
function processShapes(shapes: Shape[]): void {
    console.log('Processing shapes...');
    shapes.forEach(shape => {
        displayShapeInfo(shape);
    });
    
    const largest = findLargestShape(shapes);
    if (largest) {
        console.log(`\nLargest shape: ${largest.getInfo()}`);
    }
}

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ - –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è DIP

// –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–≥—É—Ä (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä)
const circle = createCircle(5);
const rectangle = createRectangle(4, 6);

// ‚úÖ DIP: –í—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç —Å –∞–±—Å—Ç—Ä–∞–∫—Ü–∏—è–º–∏
console.log('=== Good DIP Example ===');
displayShapeInfo(circle);
displayShapeInfo(rectangle);

console.log('\n=== Processing shapes ===');
processShapes([circle, rectangle]); 

export {}
