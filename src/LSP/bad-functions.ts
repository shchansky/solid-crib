// ‚ùå –ü–õ–û–•–û: –ù–∞—Ä—É—à–µ–Ω–∏–µ LSP - —Ñ—É–Ω–∫—Ü–∏–∏-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–µ –º–æ–≥—É—Ç –∑–∞–º–µ–Ω–∏—Ç—å –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
//
// 1. ‚ùå –ù–ê–†–£–®–ï–ù–ò–ï –ö–û–ù–¢–†–ê–ö–¢–ê - —Ñ—É–Ω–∫—Ü–∏–∏-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç—Ä–µ–±—É—é—Ç –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–µ —É—Å–ª–æ–≤–∏—è
// 2. ‚ùå –ù–ê–†–£–®–ï–ù–ò–ï –ü–†–ò–ù–¶–ò–ü–ê –ü–û–î–°–¢–ê–ù–û–í–ö–ò - —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ –≤–∑–∞–∏–º–æ–∑–∞–º–µ–Ω—è–µ–º—ã
// 3. ‚ùå –ù–ï–û–ñ–ò–î–ê–ù–ù–´–ï –ò–°–ö–õ–Æ–ß–ï–ù–ò–Ø - —Ñ—É–Ω–∫—Ü–∏–∏ –±—Ä–æ—Å–∞—é—Ç –æ—à–∏–±–∫–∏ –ø—Ä–∏ –≤–∞–ª–∏–¥–Ω—ã—Ö –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
// 4. ‚ùå –°–£–ñ–ï–ù–ò–ï –ü–†–ï–î–£–°–õ–û–í–ò–ô - —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏–Ω–∏–º–∞—é—Ç –Ω–µ –≤—Å–µ –≤–∞–ª–∏–¥–Ω—ã–µ –≤—Ö–æ–¥—ã –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
// 5. ‚ùå –ù–ê–†–£–®–ï–ù–ò–ï –ü–û–õ–ò–ú–û–†–§–ò–ó–ú–ê - –∫–æ–¥ –¥–æ–ª–∂–µ–Ω –∑–Ω–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ä–∞–±–æ—Ç—ã

interface ShapeData {
  getArea(): number;
  getPerimeter(): number;
  // –ñ–µ—Å—Ç–∫–∏–π —Ñ–æ—Ä–º–∞—Ç: "–ò–ú–Ø: Area=–ß–ò–°–õ–û, Perimeter=–ß–ò–°–õ–û"
  getInfo(): `${string}: Area=${string}, Perimeter=${string}`;
}

function createRectangle(width: number, height: number): ShapeData {
  return {
    getArea: () => width * height,
    getPerimeter: () => 2 * (width + height),
    getInfo: () =>
      `Rectangle: Area=${(width * height).toFixed(2)}, Perimeter=${(
        2 *
        (width + height)
      ).toFixed(2)}`,
  };
}

function createCircle(radius: number): ShapeData {
  return {
    getArea: () => Math.PI * radius * radius,
    getPerimeter: () => 2 * Math.PI * radius,
    getInfo: () =>
      `Circle: Area=${(Math.PI * radius * radius).toFixed(2)}, Perimeter=${(
        2 *
        Math.PI *
        radius
      ).toFixed(2)}`,
  };
}

function createTriangle(
  side1: number,
  side2: number,
  side3: number
): ShapeData {
  return {
    getArea: () => {
      const perimeter = side1 + side2 + side3;
      const s = perimeter / 2;
      return Math.sqrt(s * (s - side1) * (s - side2) * (s - side3));
    },
    getPerimeter: () => side1 + side2 + side3,
    getInfo: () => {
      const area = (() => {
        const perimeter = side1 + side2 + side3;
        const s = perimeter / 2;
        return Math.sqrt(s * (s - side1) * (s - side2) * (s - side3));
      })();
      const perimeter = side1 + side2 + side3;
      return `Triangle: Area=${area.toFixed(2)}, Perimeter=${perimeter.toFixed(
        2
      )}`;
    },
  };
}

// ‚úÖ –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å —à–∏—Ä–æ–∫–∏–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–º
// üí° –ö–û–ù–¢–†–ê–ö–¢: –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –ª—é–±—É—é ShapeData, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
// üéØ –û–ë–ï–©–ê–ù–ò–ï: –†–∞–±–æ—Ç–∞–µ—Ç —Å –ª—é–±—ã–º–∏ ShapeData, –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –±—Ä–æ—Å–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–π
function processShape(shape: ShapeData): {
  info: string;
  area: number;
  perimeter: number;
} {
  return {
    info: shape.getInfo(),
    area: shape.getArea(),
    perimeter: shape.getPerimeter(),
  };
}

// ‚ùå –ù–ê–†–£–®–ï–ù–ò–ï LSP: –§—É–Ω–∫—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–µ —É—Å–ª–æ–≤–∏—è, —á–µ–º –±–∞–∑–æ–≤–∞—è
// üí° –ß–¢–û –ù–ï –¢–ê–ö: –î–æ–±–∞–≤–ª—è–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
// üéØ –†–ï–ó–£–õ–¨–¢–ê–¢: –ù–µ –º–æ–∂–µ—Ç –∑–∞–º–µ–Ω–∏—Ç—å processShape –¥–ª—è –≤—Å–µ—Ö –≤–∞–ª–∏–¥–Ω—ã—Ö –≤—Ö–æ–¥–æ–≤
const processOnlyLargeShapes: typeof processShape = (shape: ShapeData) => {
  const area = shape.getArea();

  // ‚ùå –ù–ê–†–£–®–ï–ù–ò–ï LSP: –î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥—É—Å–ª–æ–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ—Ç –≤ –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
  if (area < 10) {
    throw new Error("Shape area must be at least 10"); // ‚ùå –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ª—é–±—ã–µ –ø–ª–æ—â–∞–¥–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç!
  }

  return {
    info: shape.getInfo(),
    area: area,
    perimeter: shape.getPerimeter(),
  };
};

// ‚ùå –ù–ê–†–£–®–ï–ù–ò–ï LSP: –§—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –∫—Ä—É–≥–∞–º–∏
// üí° –ß–¢–û –ù–ï –¢–ê–ö: –°—É–∂–∞–µ—Ç –ø—Ä–µ–¥—É—Å–ª–æ–≤–∏—è - –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ info –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞
// üéØ –†–ï–ó–£–õ–¨–¢–ê–¢: –ù–∞—Ä—É—à–∞–µ—Ç –ø—Ä–∏–Ω—Ü–∏–ø –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –õ–∏—Å–∫–æ–≤
const processOnlyCircles: typeof processShape = (shape: ShapeData) => {
  const info = shape.getInfo();

  // ‚ùå –ù–ê–†–£–®–ï–ù–ò–ï LSP: –î–æ–±–∞–≤–ª—è–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ —Ç–∏–ø —Ñ–∏–≥—É—Ä—ã
  if (!info.startsWith("Circle:")) {
    throw new Error("Only circles are supported"); // ‚ùå –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ª—é–±—ã–µ —Ç–∏–ø—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç!
  }

  return {
    info: shape.getInfo(),
    area: shape.getArea(),
    perimeter: shape.getPerimeter(),
  };
};

// ‚ùå –ù–ê–†–£–®–ï–ù–ò–ï LSP: –§—É–Ω–∫—Ü–∏—è –º–µ–Ω—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
// üí° –ß–¢–û –ù–ï –¢–ê–ö: –ù–∞—Ä—É—à–∞–µ—Ç –ø–æ—Å—Ç—É—Å–ª–æ–≤–∏—è - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
// üéØ –†–ï–ó–£–õ–¨–¢–ê–¢: –ö–ª–∏–µ–Ω—Ç—ã –ø–æ–ª—É—á–∞—é—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö
const processShapeWithBrokenOutput: typeof processShape = (
  shape: ShapeData
) => {
  // ‚ùå –ù–ê–†–£–®–ï–ù–ò–ï LSP: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
  return {
    info: "", // ‚ùå –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –≤–º–µ—Å—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    area: -1, // ‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–∞—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è –ø–ª–æ—â–∞–¥—å
    perimeter: shape.getArea(), // ‚ùå –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–ª–æ—â–∞–¥—å –≤–º–µ—Å—Ç–æ –ø–µ—Ä–∏–º–µ—Ç—Ä–∞!
  };
};

// ‚ùå –ù–ê–†–£–®–ï–ù–ò–ï LSP: –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–±–æ—á–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
// üí° –ß–¢–û –ù–ï –¢–ê–ö: –î–æ–±–∞–≤–ª—è–µ—Ç side effects, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
// üéØ –†–ï–ó–£–õ–¨–¢–ê–¢: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–º–µ—â–µ–Ω–∏–∏
const processShapeWithSideEffects: typeof processShape = (shape: ShapeData) => {
  // ‚ùå –ù–ê–†–£–®–ï–ù–ò–ï LSP: –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–±–æ—á–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
  console.log("LOGGING: Processing shape..."); // ‚ùå –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∏—á–µ–≥–æ –Ω–µ –ª–æ–≥–∏—Ä—É–µ—Ç!

  // ‚ùå –ï—â–µ —Ö—É–∂–µ - –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  (globalThis as any).lastProcessedShape = shape; // ‚ùå –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è —á–∏—Å—Ç–∞—è!

  return {
    info: shape.getInfo(),
    area: shape.getArea(),
    perimeter: shape.getPerimeter(),
  };
};

// ‚ùå –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–†–û–ë–õ–ï–ú–´: –§—É–Ω–∫—Ü–∏—è –≤—ã—Å—à–µ–≥–æ –ø–æ—Ä—è–¥–∫–∞ –ª–æ–º–∞–µ—Ç—Å—è –∏–∑-–∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–π LSP
function processMultipleShapes(
  processor: typeof processShape,
  shapes: ShapeData[]
): { results: string[]; errors: string[]; successCount: number } {
  const results: string[] = [];
  const errors: string[] = [];
  let successCount = 0;

  shapes.forEach((shape, index) => {
    try {
      // ‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ö–æ–¥ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ processShape
      const result = processor(shape);

      // ‚ùå –ù–ê–†–£–®–ï–ù–ò–ï LSP: result.info –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π (processShapeWithBrokenOutput)
      if (result.info) {
        results.push(result.info);
        successCount++;
      } else {
        errors.push(`Shape ${index}: Empty info returned`);
      }
    } catch (error: any) {
      // ‚ùå –ù–ê–†–£–®–ï–ù–ò–ï LSP: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
      errors.push(`Shape ${index}: ${error.message}`);
    }
  });

  return { results, errors, successCount };
}

// ‚ùå –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ù–ê–†–£–®–ï–ù–ò–ô: –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const testShapes: ShapeData[] = [
  createRectangle(4, 6), // area = 24 (–±–æ–ª—å—à–∞—è)
  createCircle(1), // area ‚âà 3.14 (–º–∞–ª–µ–Ω—å–∫–∞—è)
  createTriangle(3, 4, 5), // area = 6 (—Å—Ä–µ–¥–Ω—è—è)
  createRectangle(2, 2), // area = 4 (–º–∞–ª–µ–Ω—å–∫–∞—è)
];

// ‚úÖ –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–æ –≤—Å–µ–º–∏ –¥–∞–Ω–Ω—ã–º–∏
const baseResults = processMultipleShapes(processShape, testShapes);

// ‚ùå –ù–ê–†–£–®–ï–ù–ò–ï LSP: processOnlyLargeShapes –ª–æ–º–∞–µ—Ç—Å—è –Ω–∞ –º–∞–ª–µ–Ω—å–∫–∏—Ö —Ñ–∏–≥—É—Ä–∞—Ö
const largeResults = processMultipleShapes(processOnlyLargeShapes, testShapes);

// ‚ùå –ù–ê–†–£–®–ï–ù–ò–ï LSP: processOnlyCircles –ª–æ–º–∞–µ—Ç—Å—è –Ω–∞ –Ω–µ-–∫—Ä—É–≥–∞—Ö
const circleResults = processMultipleShapes(processOnlyCircles, testShapes);

// ‚ùå –ù–ê–†–£–®–ï–ù–ò–ï LSP: processShapeWithBrokenOutput –Ω–∞—Ä—É—à–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç
const brokenResults = processMultipleShapes(
  processShapeWithBrokenOutput,
  testShapes
);

// ‚ùå –ù–ê–†–£–®–ï–ù–ò–ï LSP: processShapeWithSideEffects –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–±–æ—á–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
const sideEffectResults = processMultipleShapes(
  processShapeWithSideEffects,
  testShapes
);

export {};
