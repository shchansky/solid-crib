// ‚ùå –ü–õ–û–•–û: –ù–∞—Ä—É—à–µ–Ω–∏–µ LSP - —Ñ—É–Ω–∫—Ü–∏–∏-–æ–±–µ—Ä—Ç–∫–∏ –Ω–µ –º–æ–≥—É—Ç –∑–∞–º–µ–Ω–∏—Ç—å –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
//
// üîÑ –ù–ê–†–£–®–ï–ù–ò–ï –û–°–ù–û–í–ù–û–ô –ò–î–ï–ò LSP:
// 1. ‚ùå –ù–ê–†–£–®–ï–ù–ò–ï –ö–û–ù–¢–†–ê–ö–¢–ê - —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ processRectangle, –Ω–æ —Ä–∞–±–æ—Ç–∞—é—Ç –ø–æ-–¥—Ä—É–≥–æ–º—É
// 2. ‚ùå –ù–ê–†–£–®–ï–ù–ò–ï –ü–†–ò–ù–¶–ò–ü–ê –ü–û–î–°–¢–ê–ù–û–í–ö–ò - —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –≤–∑–∞–∏–º–æ–∑–∞–º–µ–Ω—è–µ–º—ã
// 3. ‚ùå –ù–ï–û–ñ–ò–î–ê–ù–ù–û–ï –ü–û–í–ï–î–ï–ù–ò–ï - —Ñ—É–Ω–∫—Ü–∏–∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É—é—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ-—Ä–∞–∑–Ω–æ–º—É
// 4. ‚ùå –°–õ–û–ñ–ù–û–°–¢–¨ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø - –Ω—É–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∂–¥—É—é —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–¥–µ–ª—å–Ω–æ
// 5. ‚ùå –ù–ê–†–£–®–ï–ù–ò–ï –ü–û–õ–ò–ú–û–†–§–ò–ó–ú–ê - –∫–æ–¥ –¥–æ–ª–∂–µ–Ω –∑–Ω–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
//
// üö® –ü–†–û–ë–õ–ï–ú–´:
// 1. –ù–∞—Ä—É—à–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ - —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ processRectangle, –Ω–æ —Ä–∞–±–æ—Ç–∞—é—Ç –ø–æ-–¥—Ä—É–≥–æ–º—É
// 2. –ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø–∞ –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ - —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –≤–∑–∞–∏–º–æ–∑–∞–º–µ–Ω—è–µ–º—ã
// 3. –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ - —Ñ—É–Ω–∫—Ü–∏–∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É—é—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ-—Ä–∞–∑–Ω–æ–º—É
// 4. –°–ª–æ–∂–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –Ω—É–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∂–¥—É—é —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–¥–µ–ª—å–Ω–æ
// 5. –ù–∞—Ä—É—à–µ–Ω–∏–µ –ø–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º–∞ - –∫–æ–¥ –¥–æ–ª–∂–µ–Ω –∑–Ω–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é

// ‚úÖ –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å —á–µ—Ç–∫–∏–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–º - –∞–Ω–∞–ª–æ–≥ Shape
function processRectangle(width: number, height: number): { area: number; perimeter: number; info: string } {
    // –ö–æ–Ω—Ç—Ä–∞–∫—Ç: width –∏ height - —ç—Ç–æ —Ä–∞–∑–º–µ—Ä—ã –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
    return {
        area: width * height,           // –ü–ª–æ—â–∞–¥—å = —à–∏—Ä–∏–Ω–∞ √ó –≤—ã—Å–æ—Ç–∞
        perimeter: 2 * (width + height), // –ü–µ—Ä–∏–º–µ—Ç—Ä = 2 √ó (—à–∏—Ä–∏–Ω–∞ + –≤—ã—Å–æ—Ç–∞)
        info: `Rectangle: ${width}x${height}` // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–µ
    };
}

// ‚úÖ –§—É–Ω–∫—Ü–∏—è –Ω–µ –Ω–∞—Ä—É—à–∞–µ—Ç LSP - –∫–≤–∞–¥—Ä–∞—Ç, —Ç–∞–∫–æ–π –∂–µ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
const processSquare: typeof processRectangle = (width: number, height: number) => {
    return {
        area: width * height, 
        perimeter: 2 * (width + height), // –ü–µ—Ä–∏–º–µ—Ç—Ä = 2 √ó (—à–∏—Ä–∏–Ω–∞ + –≤—ã—Å–æ—Ç–∞)
        info: `Rectangle: ${width}x${height}` // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–µ
    };
}

// ‚ùå –ù–ê–†–£–®–ï–ù–ò–ï LSP: –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ processRectangle, –Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ-–¥—Ä—É–≥–æ–º—É
// üí° –ß–¢–û –ù–ï –¢–ê–ö: –ù–∞—Ä—É—à–∞–µ—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
// üéØ –†–ï–ó–£–õ–¨–¢–ê–¢: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
const processCircle: typeof processRectangle = (width: number, height: number) => {
    // ‚ùå –ù–ê–†–£–®–ï–ù–ò–ï –ö–û–ù–¢–†–ê–ö–¢–ê processRectangle:
    // üí° –ß–¢–û –ù–ï –¢–ê–ö:
    //    - width –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ—Ç—Å—è –∫–∞–∫ radius
    //    - height –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è
    //    - —Ñ–æ—Ä–º—É–ª—ã –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫—É
    // üéØ –†–ï–®–ï–ù–ò–ï: –°–æ–∑–¥–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∫—Ä—É–≥–∞
    const radius = width;
    return {
        area: Math.PI * radius * radius,     // ‚ùå –ù–µ width * height
        perimeter: 2 * Math.PI * radius,     // ‚ùå –ù–µ 2 * (width + height)
        info: `Circle: radius=${radius}`     // ‚ùå –ù–µ `Rectangle: ${width}x${height}`
    };
};

// ‚ùå –ù–ê–†–£–®–ï–ù–ò–ï LSP: –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ processRectangle, –Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ-–¥—Ä—É–≥–æ–º—É
// üí° –ß–¢–û –ù–ï –¢–ê–ö: –ù–∞—Ä—É—à–∞–µ—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
// üéØ –†–ï–ó–£–õ–¨–¢–ê–¢: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
const processTriangle: typeof processRectangle = (width: number, height: number) => {
    // ‚ùå –ù–ê–†–£–®–ï–ù–ò–ï –ö–û–ù–¢–†–ê–ö–¢–ê processRectangle:
    // üí° –ü–†–û–ë–õ–ï–ú–ê:
    //    - width –∏ height –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É—é—Ç—Å—è –∫–∞–∫ —Å—Ç–æ—Ä–æ–Ω—ã —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞
    //    - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–æ—Ä–º—É–ª–∞ –ì–µ—Ä–æ–Ω–∞ –≤–º–µ—Å—Ç–æ –ø—Ä–æ—Å—Ç–æ–≥–æ —É–º–Ω–æ–∂–µ–Ω–∏—è
    //    - –ø–µ—Ä–∏–º–µ—Ç—Ä –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è –∫–∞–∫ —Å—É–º–º–∞ —Å—Ç–æ—Ä–æ–Ω, –∞ –Ω–µ 2 √ó (—à–∏—Ä–∏–Ω–∞ + –≤—ã—Å–æ—Ç–∞)
    // üéØ –†–ï–®–ï–ù–ò–ï: –°–æ–∑–¥–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞
    const side1 = width;
    const side2 = height;
    const side3 = width; // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —Ä–∞–≤–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫
    
    const perimeter = side1 + side2 + side3;
    const s = perimeter / 2; // –ø–æ–ª—É–ø–µ—Ä–∏–º–µ—Ç—Ä –¥–ª—è —Ñ–æ—Ä–º—É–ª—ã –ì–µ—Ä–æ–Ω–∞
    const area = Math.sqrt(s * (s - side1) * (s - side2) * (s - side3));
    
    return {
        area,                              // ‚ùå –ù–µ width * height
        perimeter,                         // ‚ùå –ù–µ 2 * (width + height)
        info: `Triangle: sides=${side1},${side2},${side3}` // ‚ùå –ù–µ `Rectangle: ${width}x${height}`
    };
};

// ‚ùå –ù–ê–†–£–®–ï–ù–ò–ï LSP: –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ–∂–∏–¥–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é —Å —Å–∏–≥–Ω–∞—Ç—É—Ä–æ–π processRectangle, –Ω–æ –º–æ–∂–µ—Ç —Å–ª–æ–º–∞—Ç—å—Å—è
// üí° –ß–¢–û –ù–ï –¢–ê–ö: –§—É–Ω–∫—Ü–∏—è –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –æ—Ç —Ñ—É–Ω–∫—Ü–∏–π-–æ–±–µ—Ä—Ç–æ–∫
// üéØ –†–ï–ó–£–õ–¨–¢–ê–¢: –ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø–∞ –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –õ–∏—Å–∫–æ–≤
function processShapes(processor: typeof processRectangle, shapes: Array<{width: number, height: number}>): {
    totalArea: number;
    totalPerimeter: number;
    infoArray: string[];
} {
    let totalArea = 0;
    let totalPerimeter = 0;
    const infoArray: string[] = [];
    
    shapes.forEach((shape, index) => {
        try {
            // ‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ö–æ–¥ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ processRectangle, –Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –¥—Ä—É–≥–æ–µ
            const result = processor(shape.width, shape.height);
            
            // ‚ùå –ù–ê–†–£–®–ï–ù–ò–ï LSP: result.area –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã—á–∏—Å–ª–µ–Ω–∞ –ø–æ-–¥—Ä—É–≥–æ–º—É
            // üí° –ß–¢–û –ù–ï –¢–ê–ö: –û–∂–∏–¥–∞–µ—Ç—Å—è: area = width * height (–∫–∞–∫ –≤ processRectangle)
            // üéØ –†–ï–ó–£–õ–¨–¢–ê–¢: –ü–æ–ª—É—á–∞–µ—Ç—Å—è: –º–æ–∂–µ—Ç –±—ã—Ç—å œÄ * width¬≤ (processCircle) –∏–ª–∏ —Ñ–æ—Ä–º—É–ª–∞ –ì–µ—Ä–æ–Ω–∞ (processTriangle)
            totalArea += result.area;
            
            // ‚ùå –ù–ê–†–£–®–ï–ù–ò–ï LSP: result.perimeter –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã—á–∏—Å–ª–µ–Ω –ø–æ-–¥—Ä—É–≥–æ–º—É
            // üí° –ß–¢–û –ù–ï –¢–ê–ö: –û–∂–∏–¥–∞–µ—Ç—Å—è: perimeter = 2 * (width + height) (–∫–∞–∫ –≤ processRectangle)
            // üéØ –†–ï–ó–£–õ–¨–¢–ê–¢: –ü–æ–ª—É—á–∞–µ—Ç—Å—è: –º–æ–∂–µ—Ç –±—ã—Ç—å 2œÄ * width (processCircle) –∏–ª–∏ sum(sides) (processTriangle)
            totalPerimeter += result.perimeter;
            
            // ‚ùå –ù–ê–†–£–®–ï–ù–ò–ï LSP: result.info –º–æ–∂–µ—Ç –∏–º–µ—Ç—å –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç
            // üí° –ß–¢–û –ù–ï –¢–ê–ö: –û–∂–∏–¥–∞–µ—Ç—Å—è: "Rectangle: widthxheight" (–∫–∞–∫ –≤ processRectangle)
            // üéØ –†–ï–ó–£–õ–¨–¢–ê–¢: –ü–æ–ª—É—á–∞–µ—Ç—Å—è: –º–æ–∂–µ—Ç –±—ã—Ç—å "Circle: radius=X" (processCircle) –∏–ª–∏ "Triangle: sides=X,Y,Z" (processTriangle)
            infoArray.push(result.info);
            
        } catch (error: any) {
            // ‚ùå –ù–ê–†–£–®–ï–ù–ò–ï LSP: processSquare –º–æ–∂–µ—Ç –≤—ã–±—Ä–æ—Å–∏—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –Ω–µ–∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Ñ–∏–≥—É—Ä
            // üí° –ß–¢–û –ù–ï –¢–ê–ö: –û–∂–∏–¥–∞–µ—Ç—Å—è: —Ñ—É–Ω–∫—Ü–∏—è –≤—Å–µ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏–π (–∫–∞–∫ processRectangle)
            // üéØ –†–ï–ó–£–õ–¨–¢–ê–¢: –ü–æ–ª—É—á–∞–µ—Ç—Å—è: –º–æ–∂–µ—Ç –≤—ã–±—Ä–æ—Å–∏—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
            infoArray.push(`Error: ${error.message}`);
        }
    });
    
    return {
        totalArea,
        totalPerimeter,
        infoArray
    };
}

// ‚ùå –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–†–û–ë–õ–ï–ú: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
// üí° –ß–¢–û –ù–ï –¢–ê–ö: –§—É–Ω–∫—Ü–∏–∏-–æ–±–µ—Ä—Ç–∫–∏ –Ω–µ –º–æ–≥—É—Ç –∑–∞–º–µ–Ω–∏—Ç—å –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
// üéØ –†–ï–ó–£–õ–¨–¢–ê–¢: –ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø–∞ –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏
const lspShapes = [
    { width: 4, height: 6 },  // –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
    { width: 5, height: 5 },  // –∫–≤–∞–¥—Ä–∞—Ç
    { width: 3, height: 4 },  // —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ (—Å—Ç–æ—Ä–æ–Ω—ã 3, 4, 3)
    { width: 7, height: 3 }   // –ø–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å "–Ω–µ–∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –∫–≤–∞–¥—Ä–∞—Ç"
];

// ‚úÖ –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
const rectangleResult = processShapes(processRectangle, lspShapes);

// ‚ùå –ù–ê–†–£–®–ï–ù–ò–ï LSP: —Ñ—É–Ω–∫—Ü–∏—è-–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∫—Ä—É–≥–∞ –Ω–∞—Ä—É—à–∞–µ—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç processRectangle
// üí° –ß–¢–û –ù–ï –¢–ê–ö: –û–∂–∏–¥–∞–µ—Ç—Å—è: area = width * height, perimeter = 2 * (width + height)
// üéØ –†–ï–ó–£–õ–¨–¢–ê–¢: –ü–æ–ª—É—á–∞–µ—Ç—Å—è: area = œÄ * width¬≤, perimeter = 2œÄ * width
const circleResult = processShapes(processCircle, lspShapes);

// ‚ùå –ù–ê–†–£–®–ï–ù–ò–ï LSP: —Ñ—É–Ω–∫—Ü–∏—è-–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ –Ω–∞—Ä—É—à–∞–µ—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç processRectangle
// üí° –ß–¢–û –ù–ï –¢–ê–ö: –û–∂–∏–¥–∞–µ—Ç—Å—è: area = width * height, perimeter = 2 * (width + height)
// üéØ –†–ï–ó–£–õ–¨–¢–ê–¢: –ü–æ–ª—É—á–∞–µ—Ç—Å—è: area = —Ñ–æ—Ä–º—É–ª–∞ –ì–µ—Ä–æ–Ω–∞, perimeter = sum(sides)
const triangleResult = processShapes(processTriangle, lspShapes);

// ‚ùå –ù–ê–†–£–®–ï–ù–ò–ï LSP: —Ñ—É–Ω–∫—Ü–∏—è-–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∫–≤–∞–¥—Ä–∞—Ç–∞ –Ω–∞—Ä—É—à–∞–µ—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç processRectangle
// üí° –ß–¢–û –ù–ï –¢–ê–ö: –û–∂–∏–¥–∞–µ—Ç—Å—è: –≤—Å–µ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
// üéØ –†–ï–ó–£–õ–¨–¢–ê–¢: –ü–æ–ª—É—á–∞–µ—Ç—Å—è: –º–æ–∂–µ—Ç –≤—ã–±—Ä–æ—Å–∏—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤
const squareResult = processShapes(processSquare, lspShapes);

// üß™ –Æ–Ω–∏—Ç‚Äë—Ç–µ—Å—Ç (–ø—Å–µ–≤–¥–æ): –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π‚Äë–∑–∞–º–µ–Ω–∏—Ç–µ–ª–µ–π
// function assertRectangleProcessor(proc: typeof processRectangle) {
//   const { area, perimeter, info } = proc(4, 6);
//   if (area !== 24 || perimeter !== 20 || !/^Rectangle: 4x6$/.test(info)) {
//     throw new Error('–ù–∞—Ä—É—à–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ processRectangle');
//   }
// }
// assertRectangleProcessor(processRectangle); // ‚úÖ
// // assertRectangleProcessor(processCircle);   // ‚ùå –Ω–∞—Ä—É—à–∞–µ—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç
// // assertRectangleProcessor(processTriangle); // ‚ùå –Ω–∞—Ä—É—à–∞–µ—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç

export {}