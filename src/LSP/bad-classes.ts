// ‚ùå –ü–õ–û–•–û: –ù–∞—Ä—É—à–µ–Ω–∏–µ LSP - –∫–ª–∞—Å—Å—ã-–Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∏ –Ω–µ –º–æ–≥—É—Ç –∑–∞–º–µ–Ω–∏—Ç—å –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å
//
// üìã –ù–ê–†–£–®–ï–ù–ò–ï –û–°–ù–û–í–ù–û–ô –ò–î–ï–ò LSP:
// 1. ‚ùå –ù–ê–†–£–®–ï–ù–ò–ï –ö–û–ù–¢–†–ê–ö–¢–ê - –∫–ª–∞—Å—Å—ã-–Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω—è—é—Ç –æ–±–µ—â–∞–Ω–∏—è –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞ (—Å—É–∂–∞—é—Ç –ø–æ—Å—Ç—É—Å–ª–æ–≤–∏—è, –º–µ–Ω—è—é—Ç —Ñ–æ—Ä–º–∞—Ç )
// 2. ‚ùå –ù–ï–û–ñ–ò–î–ê–ù–ù–û–ï –ü–û–í–ï–î–ï–ù–ò–ï - –∫–æ–¥ –º–æ–∂–µ—Ç —Å–ª–æ–º–∞—Ç—å—Å—è –ø—Ä–∏ –∑–∞–º–µ–Ω–µ –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞ –Ω–∞ –∫–ª–∞—Å—Å-–Ω–∞—Å–ª–µ–¥–Ω–∏–∫
// 3. ‚ùå –ù–ê–†–£–®–ï–ù–ò–ï –ü–†–ò–ù–¶–ò–ü–ê –ü–û–î–°–¢–ê–ù–û–í–ö–ò - –∫–ª–∞—Å—Å—ã-–Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∏ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –∏—Å—Ç–∏–Ω–Ω—ã–º–∏ –ø–æ–¥—Ç–∏–ø–∞–º–∏
// 4. ‚ùå –°–õ–û–ñ–ù–û–°–¢–¨ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø - –Ω—É–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∂–¥—ã–π –ø–æ–¥–∫–ª–∞—Å—Å –æ—Ç–¥–µ–ª—å–Ω–æ
// 5. ‚ùå –ù–ê–†–£–®–ï–ù–ò–ï –ü–û–õ–ò–ú–û–†–§–ò–ó–ú–ê - –∫–æ–¥ –¥–æ–ª–∂–µ–Ω –∑–Ω–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞
//
// üö® –ü–†–û–ë–õ–ï–ú–´:
// 1. –ù–∞—Ä—É—à–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ - –∫–ª–∞—Å—Å—ã-–Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω—è—é—Ç –æ–±–µ—â–∞–Ω–∏—è –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞
// 2. –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ - –∫–æ–¥ –º–æ–∂–µ—Ç —Å–ª–æ–º–∞—Ç—å—Å—è –ø—Ä–∏ –∑–∞–º–µ–Ω–µ –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞ –Ω–∞ –∫–ª–∞—Å—Å-–Ω–∞—Å–ª–µ–¥–Ω–∏–∫
// 3. –ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø–∞ –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ - –∫–ª–∞—Å—Å—ã-–Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∏ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –∏—Å—Ç–∏–Ω–Ω—ã–º–∏ –ø–æ–¥—Ç–∏–ø–∞–º–∏
// 4. –°–ª–æ–∂–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –Ω—É–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∂–¥—ã–π –∫–ª–∞—Å—Å-–Ω–∞—Å–ª–µ–¥–Ω–∏–∫ –æ—Ç–¥–µ–ª—å–Ω–æ
// 5. –ù–∞—Ä—É—à–µ–Ω–∏–µ –ø–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º–∞ - –∫–æ–¥ –¥–æ–ª–∂–µ–Ω –∑–Ω–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞

// ‚ùå –ù–ê–†–£–®–ï–ù–ò–ï LSP: –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å —Å –Ω–µ—á–µ—Ç–∫–∏–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–º
// üí° –ß–¢–û –ù–ï –¢–ê–ö: –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—É—é —Ñ–æ—Ä–º—É
// üîß –†–ï–®–ï–ù–ò–ï: –°–æ–∑–¥–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Shape —Å –æ–±—â–∏–º–∏ –º–µ—Ç–æ–¥–∞–º–∏


type InfoType=`Shape: ${string}x${string}`

class Shape {
    protected width: number;
    protected height: number;

    constructor(width: number, height: number) {
        this.width = width;
        this.height = height;
    }

    // ‚úÖ –ë–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥ - –æ–±–µ—â–∞–µ—Ç –≤–µ—Ä–Ω—É—Ç—å –ø–ª–æ—â–∞–¥—å
    getArea(): number {
        return this.width * this.height;
    }

    // ‚úÖ –ë–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥ - –æ–±–µ—â–∞–µ—Ç –≤–µ—Ä–Ω—É—Ç—å –ø–µ—Ä–∏–º–µ—Ç—Ä
    getPerimeter(): number {
        return 2 * (this.width + this.height);
    }

    // ‚úÖ –ë–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥ - –æ–±–µ—â–∞–µ—Ç –≤–µ—Ä–Ω—É—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–≥—É—Ä–µ
    getInfo(): InfoType {
        return `Shape: ${this.width}x${this.height}`;
    }
}

// ‚ùå –ù–ê–†–£–®–ï–ù–ò–ï LSP: –ö—Ä—É–≥ –Ω–µ –º–æ–∂–µ—Ç –∑–∞–º–µ–Ω–∏—Ç—å Shape
// üí° –ß–¢–û –ù–ï –¢–ê–ö: –ö—Ä—É–≥ –∏–º–µ–µ—Ç —Ç–æ–ª—å–∫–æ —Ä–∞–¥–∏—É—Å, –∞ –Ω–µ —à–∏—Ä–∏–Ω—É –∏ –≤—ã—Å–æ—Ç—É
// üéØ –†–ï–ó–£–õ–¨–¢–ê–¢: –ù–∞—Ä—É—à–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞
class Circle extends Shape {
    private radius: number;

    constructor(radius: number) {
        // ‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ü–µ—Ä–µ–¥–∞–µ–º —Ä–∞–¥–∏—É—Å –∫–∞–∫ width –∏ height, —á—Ç–æ –Ω–µ–ª–æ–≥–∏—á–Ω–æ
        // üí° –ß–¢–û –ù–ï –¢–ê–ö: –ö—Ä—É–≥ –Ω–µ –∏–º–µ–µ—Ç —à–∏—Ä–∏–Ω—ã –∏ –≤—ã—Å–æ—Ç—ã –≤ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–æ–º —Å–º—ã—Å–ª–µ
        // üéØ –†–ï–®–ï–ù–ò–ï: Circle –Ω–µ –¥–æ–ª–∂–µ–Ω –Ω–∞—Å–ª–µ–¥–æ–≤–∞—Ç—å—Å—è –æ—Ç Shape
        super(radius * 2, radius * 2);
        this.radius = radius;
    }

    // ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º getArea() —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º –¥–ª—è –∫—Ä—É–≥–∞
    getArea(): number {
        return Math.PI * this.radius * this.radius; 
    }

    // ‚ùå –ù–ê–†–£–®–ï–ù–ò–ï LSP: –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º getPerimeter() —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º
    // üí° –ß–¢–û –ù–ï –¢–ê–ö: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∏–∞–º–µ—Ç—Ä –≤–º–µ—Å—Ç–æ –ø–µ—Ä–∏–º–µ—Ç—Ä–∞ (–¥–ª–∏–Ω—ã –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏)
    // üéØ –†–ï–ó–£–õ–¨–¢–ê–¢: –ù–∞—Ä—É—à–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ - –º–µ—Ç–æ–¥ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ–±–µ—â–∞–Ω–∏–µ
    getPerimeter(): number {
        return 2 * this.radius; // ‚ùå –≠—Ç–æ –¥–∏–∞–º–µ—Ç—Ä, –Ω–µ –ø–µ—Ä–∏–º–µ—Ç—Ä!
    }

    // ‚ùå –ù–ê–†–£–®–ï–ù–ò–ï LSP: –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º getInfo() —Å –¥—Ä—É–≥–∏–º —Ñ–æ—Ä–º–∞—Ç–æ–º
    // üí° –ß–¢–û –ù–ï –¢–ê–ö: –î—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–∞—Ä—É—à–∞–µ—Ç –æ–∂–∏–¥–∞–Ω–∏—è
    // üéØ –†–ï–ó–£–õ–¨–¢–ê–¢: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
    // üí• –û–®–ò–ë–ö–ê –ö–û–ú–ü–ò–õ–Ø–¶–ò–ò: TypeScript –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Ä—É—à–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞!
    getInfo(): InfoType {
        // ‚ùå –≠—Ç–æ—Ç –∫–æ–¥ –ù–ï –ö–û–ú–ü–ò–õ–ò–†–£–ï–¢–°–Ø –±–µ–∑ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏—è!
        // return `Circle: radius=${this.radius}`; // ‚ùå Type error!
        
        // ‚ùå –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Å–∫—Ä—ã–≤–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É
        return `Circle: radius=${this.radius}` as InfoType;
    }
}

// ‚ùå –ù–ê–†–£–®–ï–ù–ò–ï LSP: –¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ –Ω–µ –º–æ–∂–µ—Ç –∑–∞–º–µ–Ω–∏—Ç—å Shape
// üí° –ß–¢–û –ù–ï –¢–ê–ö: –¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ –∏–º–µ–µ—Ç —Ç—Ä–∏ —Å—Ç–æ—Ä–æ–Ω—ã, –∞ –Ω–µ —à–∏—Ä–∏–Ω—É –∏ –≤—ã—Å–æ—Ç—É
// üéØ –†–ï–ó–£–õ–¨–¢–ê–¢: –ù–∞—Ä—É—à–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞
class Triangle extends Shape {
    private side1: number;
    private side2: number;
    private side3: number;

    constructor(side1: number, side2: number, side3: number) {
        // ‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ü–µ—Ä–µ–¥–∞–µ–º —Å—Ç–æ—Ä–æ–Ω—ã –∫–∞–∫ width –∏ height, —á—Ç–æ –Ω–µ–ª–æ–≥–∏—á–Ω–æ
        // üí° –ü–†–û–ë–õ–ï–ú–ê: –¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ –Ω–µ –∏–º–µ–µ—Ç —à–∏—Ä–∏–Ω—ã –∏ –≤—ã—Å–æ—Ç—ã –≤ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–æ–º —Å–º—ã—Å–ª–µ
        // üéØ –†–ï–®–ï–ù–ò–ï: Triangle –Ω–µ –¥–æ–ª–∂–µ–Ω –Ω–∞—Å–ª–µ–¥–æ–≤–∞—Ç—å—Å—è –æ—Ç Shape
        super(side1, side2);
        this.side1 = side1;
        this.side2 = side2;
        this.side3 = side3;
    }

    // ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º getArea() —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º –¥–ª—è —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞
    getArea(): number {
        // –§–æ—Ä–º—É–ª–∞ –ì–µ—Ä–æ–Ω–∞ –¥–ª—è —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞
        const s = (this.side1 + this.side2 + this.side3) / 2;
        return Math.sqrt(s * (s - this.side1) * (s - this.side2) * (s - this.side3));
    }

    // ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º getPerimeter() —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º –¥–ª—è —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞
    getPerimeter(): number {
        return this.side1 + this.side2 + this.side3; // –ü—Ä–∞–≤–∏–ª—å–Ω–æ –¥–ª—è —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞
    }

    // ‚ùå –ù–ê–†–£–®–ï–ù–ò–ï LSP: –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º getInfo() —Å –¥—Ä—É–≥–∏–º —Ñ–æ—Ä–º–∞—Ç–æ–º
    // üí° –ß–¢–û –ù–ï –¢–ê–ö: –î—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–∞—Ä—É—à–∞–µ—Ç –æ–∂–∏–¥–∞–Ω–∏—è
    // üéØ –†–ï–ó–£–õ–¨–¢–ê–¢: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
    getInfo(): InfoType {
        return `Triangle: sides=${this.side1},${this.side2},${this.side3}` as InfoType; // –î—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    }
}

// ‚ùå –ù–ê–†–£–®–ï–ù–ò–ï LSP: –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ–∂–∏–¥–∞–µ—Ç Shape, –Ω–æ –º–æ–∂–µ—Ç —Å–ª–æ–º–∞—Ç—å—Å—è —Å –ø–æ–¥–∫–ª–∞—Å—Å–∞–º–∏
// üí° –ß–¢–û –ù–ï –¢–ê–ö: –§—É–Ω–∫—Ü–∏—è –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –æ—Ç –ø–æ–¥–∫–ª–∞—Å—Å–æ–≤
// üéØ –†–ï–ó–£–õ–¨–¢–ê–¢: –ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø–∞ –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –õ–∏—Å–∫–æ–≤
function processShape(shape: Shape): {
    info: string;
    area: number;
    perimeter: number;
} {
    return {
        info: shape.getInfo(),
        area: shape.getArea(),
        perimeter: shape.getPerimeter(),
    };
}

// ‚ùå –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–†–û–ë–õ–ï–ú: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
// üí° –ß–¢–û –ù–ï –¢–ê–ö: –ü–æ–¥–∫–ª–∞—Å—Å—ã –Ω–µ –º–æ–≥—É—Ç –∑–∞–º–µ–Ω–∏—Ç—å –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å
// üéØ –†–ï–ó–£–õ–¨–¢–ê–¢: –ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø–∞ –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏
const lspRectangle = new Shape(4, 6);
const lspCircle = new Circle(5);
const lspTriangle = new Triangle(3, 4, 5);

processShape(lspRectangle); // ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –æ–∂–∏–¥–∞–µ—Ç—Å—è

processShape(lspCircle); // ‚ùå –ë—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å, –Ω–æ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ
// üí° –ß–¢–û –ù–ï –¢–ê–ö: getPerimeter() –≤–µ—Ä–Ω–µ—Ç –¥–∏–∞–º–µ—Ç—Ä –≤–º–µ—Å—Ç–æ –ø–µ—Ä–∏–º–µ—Ç—Ä–∞

processShape(lspTriangle); // ‚ùå –ë—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å, –Ω–æ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ
// üí° –ß–¢–û –ù–ï –¢–ê–ö: getInfo() –≤–µ—Ä–Ω–µ—Ç –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏

// ‚ùó –ü–æ—è—Å–Ω–µ–Ω–∏–µ: –Ω–∞—Ä—É—à–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ (LSP)
// - –°—É–∂–µ–Ω–∏–µ –ø–æ—Å—Ç—É—Å–ª–æ–≤–∏–π: –º–µ—Ç–æ–¥ getPerimeter() –≤ Circle –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∏–∞–º–µ—Ç—Ä –≤–º–µ—Å—Ç–æ –¥–ª–∏–Ω—ã –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏
// - –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞: –º–µ—Ç–æ–¥ getInfo() –≤ Circle/Triangle –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–æ–π —Ñ–æ—Ä–º–∞—Ç, —á–µ–º –±–∞–∑–æ–≤—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç
// - –°–ª–µ–¥—Å—Ç–≤–∏–µ: –∫–ª–∏–µ–Ω—Ç—ã, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é—â–∏–µ –Ω–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç Shape, –ø–æ–ª—É—á–∞—é—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è/—Ñ–æ—Ä–º–∞—Ç—ã

// üß™ –Æ–Ω–∏—Ç‚Äë—Ç–µ—Å—Ç (–ø—Å–µ–≤–¥–æ) ‚Äî –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç—ã –ª–æ–º–∞—é—Ç—Å—è –∏–∑‚Äë–∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
// function assertLsp(shape: Shape) {
//     const info = shape.getInfo();
//     // –ö–ª–∏–µ–Ω—Ç –æ–∂–∏–¥–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç –±–∞–∑–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
//     const matches = /^Shape: \d+x\d+$/.test(info);
//     if (!matches) throw new Error('–ù–∞—Ä—É—à–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —Ñ–æ—Ä–º–∞—Ç–∞ getInfo');
//     const perimeter = shape.getPerimeter();
//     if (perimeter <= 0) throw new Error('–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø–æ—Å—Ç—É—Å–ª–æ–≤–∏–π getPerimeter');
// }
// assertLsp(lspRectangle); // ‚úÖ
// // –°–ª–µ–¥—É—é—â–∏–µ –≤—ã–∑–æ–≤—ã –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É—é—Ç —Å–±–æ–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:
// // assertLsp(lspCircle);   // ‚ùå –±—Ä–æ—Å–∏—Ç –æ—à–∏–±–∫—É –∏–∑‚Äë–∑–∞ —Ñ–æ—Ä–º–∞—Ç–∞/–∑–Ω–∞—á–µ–Ω–∏—è
// // assertLsp(lspTriangle); // ‚ùå –±—Ä–æ—Å–∏—Ç –æ—à–∏–±–∫—É –∏–∑‚Äë–∑–∞ —Ñ–æ—Ä–º–∞—Ç–∞

export {}