// ‚úÖ –•–û–†–û–®–û: –°–æ–±–ª—é–¥–µ–Ω–∏–µ LSP –≤ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º —Å—Ç–∏–ª–µ
//
// 1. ‚úÖ –°–û–ë–õ–Æ–î–ï–ù–ò–ï –ö–û–ù–¢–†–ê–ö–¢–ê - –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–ª–µ–¥—É—é—Ç –æ–¥–Ω–æ–º—É –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
// 2. ‚úÖ –í–ó–ê–ò–ú–û–ó–ê–ú–ï–ù–Ø–ï–ú–û–°–¢–¨ - –ª—é–±–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–æ–∂–µ—Ç –∑–∞–º–µ–Ω–∏—Ç—å –±–∞–∑–æ–≤—É—é –±–µ–∑ –Ω–∞—Ä—É—à–µ–Ω–∏—è –ø–æ–≤–µ–¥–µ–Ω–∏—è
// 3. ‚úÖ –†–ê–°–®–ò–†–ï–ù–ò–ï –ü–†–ï–î–£–°–õ–û–í–ò–ô - —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏–Ω–∏–º–∞—é—Ç –±–æ–ª–µ–µ –æ–±—â–∏–µ —Ç–∏–ø—ã (–∫–æ–Ω—Ç—Ä–∞–≤–∞—Ä–∏–∞–Ω—Ç–Ω–æ—Å—Ç—å)
// 4. ‚úÖ –°–£–ñ–ï–ù–ò–ï –ü–û–°–¢–£–°–õ–û–í–ò–ô - —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ç–∏–ø—ã (–∫–æ–≤–∞—Ä–∏–∞–Ω—Ç–Ω–æ—Å—Ç—å)
// 5. ‚úÖ –û–¢–°–£–¢–°–¢–í–ò–ï –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–• –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ô - –Ω–µ –¥–æ–±–∞–≤–ª—è—é—Ç –Ω–æ–≤—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏–ª–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è

interface ShapeData {
  getArea(): number;
  getPerimeter(): number;
  // –ñ–µ—Å—Ç–∫–∏–π —Ñ–æ—Ä–º–∞—Ç: "–ò–ú–Ø: Area=–ß–ò–°–õ–û, Perimeter=–ß–ò–°–õ–û"
  getInfo(): `${string}: Area=${string}, Perimeter=${string}`;
}

function createRectangle(width: number, height: number): ShapeData {
  return {
    getArea: () => width * height,
    getPerimeter: () => 2 * (width + height),
    getInfo: () =>
      `Rectangle: Area=${(width * height).toFixed(2)}, Perimeter=${(
        2 *
        (width + height)
      ).toFixed(2)}`,
  };
}

function createCircle(radius: number): ShapeData {
  return {
    getArea: () => Math.PI * radius * radius,
    getPerimeter: () => 2 * Math.PI * radius,
    getInfo: () =>
      `Circle: Area=${(Math.PI * radius * radius).toFixed(2)}, Perimeter=${(
        2 *
        Math.PI *
        radius
      ).toFixed(2)}`,
  };
}

function createTriangle(
  side1: number,
  side2: number,
  side3: number
): ShapeData {
  return {
    getArea: () => {
      const perimeter = side1 + side2 + side3;
      const s = perimeter / 2; // –ø–æ–ª—É–ø–µ—Ä–∏–º–µ—Ç—Ä –¥–ª—è —Ñ–æ—Ä–º—É–ª—ã –ì–µ—Ä–æ–Ω–∞
      return Math.sqrt(s * (s - side1) * (s - side2) * (s - side3));
    },
    getPerimeter: () => side1 + side2 + side3,
    getInfo: () => {
      const area = (() => {
        const perimeter = side1 + side2 + side3;
        const s = perimeter / 2;
        return Math.sqrt(s * (s - side1) * (s - side2) * (s - side3));
      })();
      const perimeter = side1 + side2 + side3;
      return `Triangle: Area=${area.toFixed(2)}, Perimeter=${perimeter.toFixed(
        2
      )}`;
    },
  };
}

// ‚úÖ LSP: –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å —à–∏—Ä–æ–∫–∏–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–º
// üí° –ö–û–ù–¢–†–ê–ö–¢: –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –ª—é–±—É—é ShapeData, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
// üéØ –†–ï–ó–£–õ–¨–¢–ê–¢: –õ—é–±–æ–π –æ–±—ä–µ–∫—Ç, —Ä–µ–∞–ª–∏–∑—É—é—â–∏–π ShapeData, –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω
function processShape(shape: ShapeData): {
  info: string;
  area: number;
  perimeter: number;
} {
  return {
    info: shape.getInfo(),
    area: shape.getArea(),
    perimeter: shape.getPerimeter(),
  };
}

// ‚úÖ LSP: –§—É–Ω–∫—Ü–∏—è-–∑–∞–º–µ–Ω–∏—Ç–µ–ª—å —Ä–∞—Å—à–∏—Ä—è–µ—Ç –ø—Ä–µ–¥—É—Å–ª–æ–≤–∏—è (–ø—Ä–∏–Ω–∏–º–∞–µ—Ç –±–æ–ª–µ–µ –æ–±—â–∏–π —Ç–∏–ø)
// üí° –ü–†–ï–ò–ú–£–©–ï–°–¢–í–û: –ú–æ–∂–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ ShapeData, —Ç–∞–∫ –∏ –±–æ–ª–µ–µ –æ–±—â–∏–µ –æ–±—ä–µ–∫—Ç—ã
function processShapeFlexible(
  shape: ShapeData | { type: string }
): ReturnType<typeof processShape> {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–±—ä–µ–∫—Ç –ø–æ–ª–Ω–æ–π ShapeData
  if ("getArea" in shape && "getPerimeter" in shape && "getInfo" in shape) {
    return processShape(shape);
  }

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
  return {
    info: `Incomplete ${(shape as any).type}: area=unknown, perimeter=unknown`,
    area: 0,
    perimeter: 0,
  };
}

// ‚úÖ LSP: –§—É–Ω–∫—Ü–∏—è-–∑–∞–º–µ–Ω–∏—Ç–µ–ª—å —Å—É–∂–∞–µ—Ç –ø–æ—Å—Ç—É—Å–ª–æ–≤–∏—è (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π —Ç–∏–ø)
// üí° –ü–†–ï–ò–ú–£–©–ï–°–¢–í–û: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —Å–æ—Ö—Ä–∞–Ω—è—è –±–∞–∑–æ–≤—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç
function processShapeDetailed(shape: ShapeData): ReturnType<
  typeof processShape
> & {
  info: string;
  area: number;
  perimeter: number;
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –Ω–µ –Ω–∞—Ä—É—à–∞—é—Ç LSP
  shapeType: string;
  timestamp: number;
} {
  const base = processShape(shape);
  return {
    ...base,
    shapeType: shape.getInfo().split(":")[0],
    timestamp: Date.now(),
  };
}

// ‚úÖ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø LSP: –§—É–Ω–∫—Ü–∏–∏-–∑–∞–º–µ–Ω–∏—Ç–µ–ª–∏ —Ä–∞–±–æ—Ç–∞—é—Ç —Å –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π
// üí° –ü–†–ï–ò–ú–£–©–ï–°–¢–í–û: –í—ã—Å—à–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ª—é–±—É—é —Ñ—É–Ω–∫—Ü–∏—é, —Å–æ–±–ª—é–¥–∞—é—â—É—é –∫–æ–Ω—Ç—Ä–∞–∫—Ç
// üéØ –†–ï–ó–£–õ–¨–¢–ê–¢: –ü–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º —Ñ—É–Ω–∫—Ü–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
function demonstrateFunctionSubstitution(
  processor: (shape: ShapeData) => {
    info: string;
    area: number;
    perimeter: number;
  },
  shapes: ShapeData[]
): {
  processorName: string;
  results: string[];
  totalArea: number;
  totalPerimeter: number;
} {
  const results: string[] = [];
  let totalArea = 0;
  let totalPerimeter = 0;

  shapes.forEach((shape) => {
    const result = processor(shape);
    results.push(
      `${result.info} | Area: ${result.area.toFixed(
        2
      )} | Perimeter: ${result.perimeter.toFixed(2)}`
    );
    totalArea += result.area;
    totalPerimeter += result.perimeter;
  });

  return {
    processorName: processor.name || "anonymous",
    results,
    totalArea,
    totalPerimeter,
  };
}

// ‚úÖ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∏–≥—É—Ä—ã
const rectangle = createRectangle(4, 6);
const circle = createCircle(5);
const triangle = createTriangle(3, 4, 5);
const testShapes = [rectangle, circle, triangle];

// ‚úÖ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø: –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏-–∑–∞–º–µ–Ω–∏—Ç–µ–ª–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤–æ
// üí° baseDemo: {processorName, results, totalArea, totalPerimeter} –¥–ª—è processShape
const baseDemo = demonstrateFunctionSubstitution(processShape, testShapes);
// üí° flexibleDemo: —Ç–æ—Ç –∂–µ —Ñ–æ—Ä–º–∞—Ç, –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤–∑–∞–∏–º–æ–∑–∞–º–µ–Ω—è–µ–º–æ—Å—Ç—å
const flexibleDemo = demonstrateFunctionSubstitution(
  processShapeFlexible,
  testShapes
);
// üí° detailedDemo: —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏ (–∫–æ–≤–∞—Ä–∏–∞–Ω—Ç–Ω–æ—Å—Ç—å)
const detailedDemo = demonstrateFunctionSubstitution(
  processShapeDetailed,
  testShapes
);

export {};
