// ‚ùå –ü–õ–û–•–û: –ù–∞—Ä—É—à–µ–Ω–∏–µ OCP - –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω—è—Ç—å –∫–ª–∞—Å—Å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ñ–∏–≥—É—Ä
//
// üìã –ù–ê–†–£–®–ï–ù–ò–ï –û–°–ù–û–í–ù–û–ô –ò–î–ï–ò OCP:
// 1. ‚ùå –ù–ï –ó–ê–ö–†–´–¢ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è - –∫–∞–∂–¥—ã–π —Ä–∞–∑ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–π —Ñ–∏–≥—É—Ä—ã –Ω—É–∂–Ω–æ –º–µ–Ω—è—Ç—å —ç—Ç–æ—Ç –∫–ª–∞—Å—Å
// 2. ‚ùå –ù–ï –û–¢–ö–†–´–¢ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è - –Ω–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ñ–∏–≥—É—Ä—É –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–¥–∞
// 3. ‚ùå –î–õ–ò–ù–ù–´–ï –¶–ï–ü–û–ß–ö–ò IF-ELSE - –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø–∞ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
// 4. ‚ùå –ó–ê–í–ò–°–ò–ú–û–°–¢–¨ –û–¢ –ö–û–ù–ö–†–ï–¢–ù–´–• –¢–ò–ü–û–í - –∫–æ–¥ –∑–Ω–∞–µ—Ç –æ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ñ–∏–≥—É—Ä–∞—Ö
//
// üö® –ü–†–û–ë–õ–ï–ú–´:
// 1. –ù–ï –ó–ê–ö–†–´–¢ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è - –∫–∞–∂–¥—ã–π —Ä–∞–∑ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–π —Ñ–∏–≥—É—Ä—ã –Ω—É–∂–Ω–æ –º–µ–Ω—è—Ç—å —ç—Ç–æ—Ç –∫–ª–∞—Å—Å
// 2. –ù–ï –û–¢–ö–†–´–¢ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è - –Ω–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ñ–∏–≥—É—Ä—É –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–¥–∞
// 3. –ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø–∞ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ - –∫–ª–∞—Å—Å –∑–Ω–∞–µ—Ç –æ –≤—Å–µ—Ö —Ç–∏–ø–∞—Ö —Ñ–∏–≥—É—Ä
// 4. –°–ª–æ–∂–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –Ω—É–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–µ—Å—å –∫–ª–∞—Å—Å –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–π —Ñ–∏–≥—É—Ä—ã
// 5. –†–∏—Å–∫ —Å–ª–æ–º–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–π —Ñ–∏–≥—É—Ä—ã

// ‚ùå –ù–ê–†–£–®–ï–ù–ò–ï OCP: –ö–ª–∞—Å—Å, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω—è—Ç—å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ñ–∏–≥—É—Ä
// üí° –ß–¢–û –ù–ï –¢–ê–ö: –ö–ª–∞—Å—Å —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–æ–≥–∏–∫—É –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Ñ–∏–≥—É—Ä
// üîß –†–ï–®–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
class ShapeCalculator {
  // ‚ùå –ù–ê–†–£–®–ï–ù–ò–ï OCP: –ú–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω—è—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–π –Ω–æ–≤–æ–π —Ñ–∏–≥—É—Ä—ã
  // üí° –ß–¢–û –ù–ï –¢–ê–ö: –î–ª–∏–Ω–Ω–∞—è —Ü–µ–ø–æ—á–∫–∞ if-else —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ç–∏–ø–æ–≤
  // üéØ –†–ï–®–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º - –∫–∞–∂–¥—ã–π –æ–±—ä–µ–∫—Ç —Å–∞–º –∑–Ω–∞–µ—Ç, –∫–∞–∫ –≤—ã—á–∏—Å–ª—è—Ç—å –ø–ª–æ—â–∞–¥—å
  calculateArea(
    shapeType: string,
    radius?: number,
    width?: number,
    height?: number
  ): number {
    if (shapeType === "circle") {
      if (!radius) throw new Error("Circle needs radius");
      return Math.PI * radius * radius;
    } else if (shapeType === "rectangle") {
      if (!width || !height)
        throw new Error("Rectangle needs width and height");
      return width * height;
    } else if (shapeType === "triangle") {
      // ‚ùå –ù–ê–†–£–®–ï–ù–ò–ï OCP: –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫, –Ω—É–∂–Ω–æ –ò–ó–ú–ï–ù–Ø–¢–¨ —ç—Ç–æ—Ç –∫–ª–∞—Å—Å!
      // üí° –ß–¢–û –ù–ï –¢–ê–ö: –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –∫–ª–∞—Å—Å –ù–ï –ó–ê–ö–†–´–¢ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
      // üéØ –†–ï–®–ï–ù–ò–ï: Triangle –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–º –∫–ª–∞—Å—Å–æ–º —Å –º–µ—Ç–æ–¥–æ–º getArea()
      if (!width || !height) throw new Error("Triangle needs base and height");
      return (width * height) / 2;
    } else if (shapeType === "square") {
      // ‚ùå –ù–ê–†–£–®–ï–ù–ò–ï OCP: –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–≤–∞–¥—Ä–∞—Ç, —Å–Ω–æ–≤–∞ –ò–ó–ú–ï–ù–Ø–ï–ú –∫–ª–∞—Å—Å!
      // üí° –ß–¢–û –ù–ï –¢–ê–ö: –ö–∞–∂–¥–∞—è –Ω–æ–≤–∞—è —Ñ–∏–≥—É—Ä–∞ —Ç—Ä–µ–±—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–¥–∞
      // üéØ –†–ï–®–ï–ù–ò–ï: Square –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–º –∫–ª–∞—Å—Å–æ–º —Å –º–µ—Ç–æ–¥–æ–º getArea()
      if (!width) throw new Error("Square needs side");
      return width * width;
    }

    throw new Error("Unknown shape type");
  }

  // ‚ùå –ù–ê–†–£–®–ï–ù–ò–ï OCP: –¢–æ—Ç –∂–µ –º–µ—Ç–æ–¥, —Ç–µ –∂–µ –ø—Ä–æ–±–ª–µ–º—ã
  // üí° –ß–¢–û –ù–ï –¢–ê–ö: –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–æ–≤
  // üéØ –†–ï–®–ï–ù–ò–ï: –ö–∞–∂–¥—ã–π –æ–±—ä–µ–∫—Ç —Å–∞–º –∑–Ω–∞–µ—Ç, –∫–∞–∫ –≤—ã—á–∏—Å–ª—è—Ç—å –ø–µ—Ä–∏–º–µ—Ç—Ä
  calculatePerimeter(
    shapeType: string,
    radius?: number,
    width?: number,
    height?: number
  ): number {
    if (shapeType === "circle") {
      if (!radius) throw new Error("Circle needs radius");
      return 2 * Math.PI * radius;
    } else if (shapeType === "rectangle") {
      if (!width || !height)
        throw new Error("Rectangle needs width and height");
      return 2 * (width + height);
    } else if (shapeType === "triangle") {
      // ‚ùå –ù–ê–†–£–®–ï–ù–ò–ï OCP: –°–Ω–æ–≤–∞ –∏–∑–º–µ–Ω—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞!
      // üí° –ü–†–û–ë–õ–ï–ú–ê: –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã - —Ç–æ—Ç –∂–µ –∫–ª–∞—Å—Å, —Ç–æ—Ç –∂–µ –º–µ—Ç–æ–¥, —Ç–µ –∂–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
      // üéØ –†–ï–®–ï–ù–ò–ï: Triangle –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–º –∫–ª–∞—Å—Å–æ–º —Å –º–µ—Ç–æ–¥–æ–º getPerimeter()
      if (!width || !height) throw new Error("Triangle needs sides");
      // –£–ø—Ä–æ—â–µ–Ω–Ω–æ - —Ä–∞–≤–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫
      return 3 * width;
    } else if (shapeType === "square") {
      // ‚ùå –ù–ê–†–£–®–ï–ù–ò–ï OCP: –ò —Å–Ω–æ–≤–∞ –∏–∑–º–µ–Ω—è–µ–º –¥–ª—è –∫–≤–∞–¥—Ä–∞—Ç–∞!
      // üí° –ß–¢–û –ù–ï –¢–ê–ö: –ü—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –≤ –∫–∞–∂–¥–æ–º –º–µ—Ç–æ–¥–µ –∫–ª–∞—Å—Å–∞
      // üéØ –†–ï–®–ï–ù–ò–ï: Square –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–º –∫–ª–∞—Å—Å–æ–º —Å –º–µ—Ç–æ–¥–æ–º getPerimeter()
      if (!width) throw new Error("Square needs side");
      return 4 * width;
    }

    throw new Error("Unknown shape type");
  }

  // ‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ñ–∏–≥—É—Ä—É –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–ª–∞—Å—Å–∞
  // üí° –ß–¢–û –ù–ï –¢–ê–ö: –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è Ellipse –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤—Å–µ –º–µ—Ç–æ–¥—ã
  // üîß –†–ï–®–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Shape –∏ –ø–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º
  // calculateArea(shapeType: string, ...) {
  //     if (shapeType === 'ellipse') {
  //         // –ü—Ä–∏—à–ª–æ—Å—å –±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –≤–µ—Ç–∫—É
  //     }
  // }
}

// ‚ùå –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–†–û–ë–õ–ï–ú: –°–ª–æ–∂–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ñ–∏–≥—É—Ä
// üí° –ß–¢–û –ù–ï –¢–ê–ö: –ö–∞–∂–¥–∞—è –Ω–æ–≤–∞—è —Ñ–∏–≥—É—Ä–∞ —Ç—Ä–µ–±—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–¥–∞
// üéØ –†–ï–ó–£–õ–¨–¢–ê–¢: –†–∏—Å–∫ —Å–ª–æ–º–∞—Ç—å —Ä–∞–±–æ—Ç–∞—é—â–∏–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª
const calculator = new ShapeCalculator();

const circleArea = calculator.calculateArea("circle", 5);
const rectangleArea = calculator.calculateArea("rectangle", undefined, 4, 6);
const triangleArea = calculator.calculateArea("triangle", undefined, 4, 6);
const squareArea = calculator.calculateArea("square", undefined, 5);

// ‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ù–µ–ª—å–∑—è –ª–µ–≥–∫–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ñ–∏–≥—É—Ä—É
// const ellipseArea = calculator.calculateArea('ellipse', 5, 3); // ‚ùå –ù—É–∂–Ω–æ –∏–∑–º–µ–Ω—è—Ç—å –∫–ª–∞—Å—Å!

export {};
