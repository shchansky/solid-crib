// ‚ùå –ü–õ–û–•–û: –ù–∞—Ä—É—à–µ–Ω–∏–µ OCP - –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω—è—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ñ–∏–≥—É—Ä
//
// üìã –ù–ê–†–£–®–ï–ù–ò–ï –û–°–ù–û–í–ù–û–ô –ò–î–ï–ò OCP:
// 1. ‚ùå –ù–ï –ó–ê–ö–†–´–¢ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è - –∫–∞–∂–¥—ã–π —Ä–∞–∑ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–π —Ñ–∏–≥—É—Ä—ã –Ω—É–∂–Ω–æ –º–µ–Ω—è—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é
// 2. ‚ùå –ù–ï –û–¢–ö–†–´–¢ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è - –Ω–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ñ–∏–≥—É—Ä—É –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–¥–∞
// 3. ‚ùå –î–õ–ò–ù–ù–´–ï –¶–ï–ü–û–ß–ö–ò IF-ELSE - –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø–∞ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
// 4. ‚ùå –ó–ê–í–ò–°–ò–ú–û–°–¢–¨ –û–¢ –ö–û–ù–ö–†–ï–¢–ù–´–• –¢–ò–ü–û–í - –∫–æ–¥ –∑–Ω–∞–µ—Ç –æ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ñ–∏–≥—É—Ä–∞—Ö
//
// üö® –ü–†–û–ë–õ–ï–ú–´:
// 1. –ù–ï –ó–ê–ö–†–´–¢ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è - –∫–∞–∂–¥—ã–π —Ä–∞–∑ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–π —Ñ–∏–≥—É—Ä—ã –Ω—É–∂–Ω–æ –º–µ–Ω—è—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é
// 2. –ù–ï –û–¢–ö–†–´–¢ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è - –Ω–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ñ–∏–≥—É—Ä—É –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–¥–∞
// 3. –î–ª–∏–Ω–Ω–∞—è —Ü–µ–ø–æ—á–∫–∞ if-else - –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø–∞ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
// 4. –°–ª–æ–∂–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –Ω—É–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å—é —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–π —Ñ–∏–≥—É—Ä—ã
// 5. –†–∏—Å–∫ —Å–ª–æ–º–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–π —Ñ–∏–≥—É—Ä—ã

// ‚ùå –ù–ê–†–£–®–ï–ù–ò–ï OCP: –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω—è—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–π –Ω–æ–≤–æ–π —Ñ–∏–≥—É—Ä—ã
// üí° –ß–¢–û –ù–ï –¢–ê–ö: –§—É–Ω–∫—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–æ–≥–∏–∫—É –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Ñ–∏–≥—É—Ä
function calculateArea(shapeType: string, radius?: number, width?: number, height?: number): number {
    // ‚ùå –ù–ê–†–£–®–ï–ù–ò–ï OCP: –î–ª–∏–Ω–Ω–∞—è —Ü–µ–ø–æ—á–∫–∞ if-else —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ç–∏–ø–æ–≤
    // üí° –ß–¢–û –ù–ï –¢–ê–ö: –ù—É–∂–Ω–æ –∑–Ω–∞—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ç–∏–ø—ã —Ñ–∏–≥—É—Ä
    if (shapeType === 'circle') {
        if (!radius) throw new Error('Circle needs radius');
        return Math.PI * radius * radius;
        
    } else if (shapeType === 'rectangle') {
        if (!width || !height) throw new Error('Rectangle needs width and height');
        return width * height;
        
    } else if (shapeType === 'triangle') {
        // ‚ùå –ù–ê–†–£–®–ï–ù–ò–ï OCP: –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫, –Ω—É–∂–Ω–æ –ò–ó–ú–ï–ù–Ø–¢–¨ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é!
        // üí° –ß–¢–û –ù–ï –¢–ê–ö: –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –ù–ï –ó–ê–ö–†–´–¢–ê –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if (!width || !height) throw new Error('Triangle needs base and height');
        return (width * height) / 2;
        
    } else if (shapeType === 'square') {
        // ‚ùå –ù–ê–†–£–®–ï–ù–ò–ï OCP: –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–≤–∞–¥—Ä–∞—Ç, —Å–Ω–æ–≤–∞ –ò–ó–ú–ï–ù–Ø–ï–ú —Ñ—É–Ω–∫—Ü–∏—é!
        // üí° –ß–¢–û –ù–ï –¢–ê–ö: –ö–∞–∂–¥–∞—è –Ω–æ–≤–∞—è —Ñ–∏–≥—É—Ä–∞ —Ç—Ä–µ–±—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–¥–∞
        if (!width) throw new Error('Square needs side');
        return width * width;
    }
    
    throw new Error('Unknown shape type');
}

// ‚ùå –ù–ê–†–£–®–ï–ù–ò–ï OCP: –¢–æ—Ç –∂–µ –º–µ—Ç–æ–¥, —Ç–µ –∂–µ –ø—Ä–æ–±–ª–µ–º—ã
// üí° –ß–¢–û –ù–ï –¢–ê–ö: –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–æ–≤
// üéØ –†–ï–®–ï–ù–ò–ï: –ö–∞–∂–¥—ã–π –æ–±—ä–µ–∫—Ç —Å–∞–º –∑–Ω–∞–µ—Ç, –∫–∞–∫ –≤—ã—á–∏—Å–ª—è—Ç—å –ø–µ—Ä–∏–º–µ—Ç—Ä
function calculatePerimeter(shapeType: string, radius?: number, width?: number, height?: number): number {
    // ‚ùå –ù–ê–†–£–®–ï–ù–ò–ï OCP: –î–ª–∏–Ω–Ω–∞—è —Ü–µ–ø–æ—á–∫–∞ if-else —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ç–∏–ø–æ–≤
    // üí° –ß–¢–û –ù–ï –¢–ê–ö: –ù—É–∂–Ω–æ –∑–Ω–∞—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ç–∏–ø—ã —Ñ–∏–≥—É—Ä
    if (shapeType === 'circle') {
        if (!radius) throw new Error('Circle needs radius');
        return 2 * Math.PI * radius;
        
    } else if (shapeType === 'rectangle') {
        if (!width || !height) throw new Error('Rectangle needs width and height');
        return 2 * (width + height);
        
    } else if (shapeType === 'triangle') {
        // ‚ùå –ù–ê–†–£–®–ï–ù–ò–ï OCP: –°–Ω–æ–≤–∞ –∏–∑–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞!
        // üí° –ß–¢–û –ù–ï –¢–ê–ö: –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã - —Ç–∞ –∂–µ —Ñ—É–Ω–∫—Ü–∏—è, —Ç–µ –∂–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if (!width) throw new Error('Triangle needs side');
        return 3 * width; // –£–ø—Ä–æ—â–µ–Ω–Ω–æ
        
    } else if (shapeType === 'square') {
        // ‚ùå –ù–ê–†–£–®–ï–ù–ò–ï OCP: –ò —Å–Ω–æ–≤–∞ –∏–∑–º–µ–Ω—è–µ–º –¥–ª—è –∫–≤–∞–¥—Ä–∞—Ç–∞!
        // üí° –ß–¢–û –ù–ï –¢–ê–ö: –ü—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –≤ –∫–∞–∂–¥–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
        if (!width) throw new Error('Square needs side');
        return 4 * width;
    }
    
    throw new Error('Unknown shape type');
}

// ‚ùå –ù–ê–†–£–®–ï–ù–ò–ï OCP: –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π, –Ω–∞—Ä—É—à–∞—é—â–∏—Ö OCP
// üí° –ß–¢–û –ù–ï –¢–ê–ö: –ö–∞–∂–¥—ã–π —Ä–∞–∑ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è!
function processShape(shapeType: string, radius?: number, width?: number, height?: number): {area: number, perimeter: number} {
    // ‚ùå –ù–ê–†–£–®–ï–ù–ò–ï OCP: –ö–∞–∂–¥—ã–π —Ä–∞–∑ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è!
    // üí° –ß–¢–û –ù–ï –¢–ê–ö: –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ —Ç–æ–∂–µ –Ω–∞—Ä—É—à–∞—é—Ç OCP
    const area = calculateArea(shapeType, radius, width, height);
    const perimeter = calculatePerimeter(shapeType, radius, width, height);
    
    return {area, perimeter};
}

// ‚ùå –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–†–û–ë–õ–ï–ú: –°–ª–æ–∂–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ñ–∏–≥—É—Ä
// üí° –ß–¢–û –ù–ï –¢–ê–ö: –ö–∞–∂–¥–∞—è –Ω–æ–≤–∞—è —Ñ–∏–≥—É—Ä–∞ —Ç—Ä–µ–±—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–¥–∞
// üéØ –†–ï–ó–£–õ–¨–¢–ê–¢: –†–∏—Å–∫ —Å–ª–æ–º–∞—Ç—å —Ä–∞–±–æ—Ç–∞—é—â–∏–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª
const circleParams = processShape('circle', 5);
const rectangleParams = processShape('rectangle', undefined, 4, 6);
const triangleParams = processShape('triangle', undefined, 4, 6);
const squareParams = processShape('square', undefined, 5);

// ‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ù–µ–ª—å–∑—è –ª–µ–≥–∫–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ñ–∏–≥—É—Ä—É
// const ellipseParams = processShape('ellipse', 5, 3); // ‚ùå –ù—É–∂–Ω–æ –∏–∑–º–µ–Ω—è—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏!


export {}