// ‚úÖ –•–û–†–û–®–û: –°–æ–±–ª—é–¥–µ–Ω–∏–µ OCP - –æ—Ç–∫—Ä—ã—Ç –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è, –∑–∞–∫—Ä—ã—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
//
// üîì –û–°–ù–û–í–ù–ê–Ø –ò–î–ï–Ø OCP:
// 1. ‚úÖ –ó–ê–ö–†–´–¢ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è - –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –Ω–µ –º–µ–Ω—è—é—Ç—Å—è –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö —Ñ–∏–≥—É—Ä
// 2. ‚úÖ –û–¢–ö–†–´–¢ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è - –Ω–æ–≤—ã–µ —Ñ–∏–≥—É—Ä—ã –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Shape
// 3. ‚úÖ –ü–û–õ–ò–ú–û–†–§–ò–ó–ú - –æ–¥–∏–Ω –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å, —Ä–∞–∑–Ω—ã–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
// 4. ‚úÖ –ê–ë–°–¢–†–ê–ö–¶–ò–ò - –∫–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞–º–∏, –∞ –Ω–µ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏
//
// –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê:
// 1. –ó–ê–ö–†–´–¢ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è - –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –Ω–µ –º–µ–Ω—è—é—Ç—Å—è –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö —Ñ–∏–≥—É—Ä
// 2. –û–¢–ö–†–´–¢ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è - –Ω–æ–≤—ã–µ —Ñ–∏–≥—É—Ä—ã –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Shape
// 3. –ü–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º - –æ–¥–∏–Ω –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å, —Ä–∞–∑–Ω—ã–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
// 4. –õ–µ–≥–∫–æ—Å—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - —Ç–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã
// 5. –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å - –Ω–µ—Ç —Ä–∏—Å–∫–∞ —Å–ª–æ–º–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª

// ‚úÖ OCP: –ë–∞–∑–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å - –ó–ê–ö–†–´–¢ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
// üí° –ü–†–ï–ò–ú–£–©–ï–°–¢–í–û: –≠—Ç–æ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö —Ñ–∏–≥—É—Ä
// üéØ –†–ï–ó–£–õ–¨–¢–ê–¢: –°—Ç–∞–±–∏–ª—å–Ω–∞—è –æ—Å–Ω–æ–≤–∞ –¥–ª—è –≤—Å–µ—Ö —Ñ–∏–≥—É—Ä
interface Shape {
    calculateArea(): number;
    calculatePerimeter(): number;
}

// ‚úÖ OCP: –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ–∏–≥—É—Ä—ã - –û–¢–ö–†–´–¢–´ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
// üí° –ü–†–ï–ò–ú–£–©–ï–°–¢–í–û: –ö–∞–∂–¥—ã–π –∫–ª–∞—Å—Å —Ä–µ–∞–ª–∏–∑—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Shape –∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–¥–∞
// üéØ –†–ï–ó–£–õ–¨–¢–ê–¢: –õ–µ–≥–∫–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ç–∏–ø–æ–≤
class Circle implements Shape {
    constructor(private radius: number) {}

    calculateArea(): number {
        return Math.PI * this.radius * this.radius;
    }

    calculatePerimeter(): number {
        return 2 * Math.PI * this.radius;
    }

    // ‚úÖ OCP: –ú–æ–∂–µ–º —Ä–∞—Å—à–∏—Ä–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∫–ª–∞—Å—Å–∞
    // üí° –ü–†–ï–ò–ú–£–©–ï–°–¢–í–û: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –Ω–µ –Ω–∞—Ä—É—à–∞—é—Ç –ø—Ä–∏–Ω—Ü–∏–ø
    // üéØ –†–ï–ó–£–õ–¨–¢–ê–¢: –ì–∏–±–∫–æ—Å—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    getInfo(): string {
        return `Circle: radius=${this.radius}`;
    }
}

class Rectangle implements Shape {
    constructor(private width: number, private height: number) {}

    calculateArea(): number {
        return this.width * this.height;
    }

    calculatePerimeter(): number {
        return 2 * (this.width + this.height);
    }
}

// ‚úÖ OCP: –õ–µ–≥–∫–æ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ñ–∏–≥—É—Ä—ã –ë–ï–ó –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–¥–∞!
// üí° –ü–†–ï–ò–ú–£–©–ï–°–¢–í–û: –ü—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–ª–∞—Å—Å, —Ä–µ–∞–ª–∏–∑—É—é—â–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Shape
// üéØ –†–ï–ó–£–õ–¨–¢–ê–¢: –ü—Ä–∏–Ω—Ü–∏–ø –æ—Ç–∫—Ä—ã—Ç–æ—Å—Ç–∏/–∑–∞–∫—Ä—ã—Ç–æ—Å—Ç–∏ —Å–æ–±–ª—é–¥–∞–µ—Ç—Å—è
class Triangle implements Shape {
    constructor(private base: number, private height: number, private side1: number, private side2: number) {}

    calculateArea(): number {
        return (this.base * this.height) / 2;
    }

    calculatePerimeter(): number {
        return this.base + this.side1 + this.side2;
    }
}

// ‚úÖ OCP: –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ª—é–±—ã–º–∏ —Ñ–∏–≥—É—Ä–∞–º–∏ - –ó–ê–ö–†–´–¢ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
// üí° –ü–†–ï–ò–ú–£–©–ï–°–¢–í–û: –≠—Ç–æ—Ç –∫–ª–∞—Å—Å –ù–ò–ö–û–ì–î–ê –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö —Ñ–∏–≥—É—Ä!
// üéØ –†–ï–ó–£–õ–¨–¢–ê–¢: –û–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º Shape, –∞ –Ω–µ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏
class ShapeCalculator {
    // ‚úÖ OCP: –ú–µ—Ç–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–µ–π Shape
    // üí° –ü–†–ï–ò–ú–£–©–ï–°–¢–í–û: –ù–µ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–∏–ø—ã —Ñ–∏–≥—É—Ä
    // üéØ –†–ï–ó–£–õ–¨–¢–ê–¢: –ü–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    calculate(shapes: Shape[]): {area: number, perimeter: number}[] {
        return shapes.map(shape => ({
            area: shape.calculateArea(),
            perimeter: shape.calculatePerimeter(),
        }));
    }

    // ‚úÖ OCP: –õ–µ–≥–∫–æ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö
    // üí° –ü–†–ï–ò–ú–£–©–ï–°–¢–í–û: –†–∞—Å—à–∏—Ä—è–µ–º–æ—Å—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–¥–∞
    // üéØ –†–ï–ó–£–õ–¨–¢–ê–¢: –ü—Ä–∏–Ω—Ü–∏–ø –æ—Ç–∫—Ä—ã—Ç–æ—Å—Ç–∏/–∑–∞–∫—Ä—ã—Ç–æ—Å—Ç–∏ —Å–æ–±–ª—é–¥–∞–µ—Ç—Å—è
    getTotalArea(shapes: Shape[]): number {
        return shapes.reduce((total, shape) => total + shape.calculateArea(), 0);
    }
}

// ‚úÖ OCP: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ - –Ω–æ–≤—ã–µ —Ñ–∏–≥—É—Ä—ã –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–¥–∞
// üí° –ü–†–ï–ò–ú–£–©–ï–°–¢–í–û: –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ª—é–±—ã–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏, —Ä–µ–∞–ª–∏–∑—É—é—â–∏–º–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Shape
// üéØ –†–ï–ó–£–õ–¨–¢–ê–¢: –ì–∏–±–∫–æ—Å—Ç—å –∏ —Ä–∞—Å—à–∏—Ä—è–µ–º–æ—Å—Ç—å
const calculator = new ShapeCalculator();

const _circle = new Circle(5);
const _rectangle = new Rectangle(4, 6);
const _triangle = new Triangle(4, 6, 5, 7);

calculator.calculate([_circle, _rectangle, _triangle]);

// ‚úÖ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø: –õ–µ–≥–∫–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ñ–∏–≥—É—Ä
// üí° –ü–†–ï–ò–ú–£–©–ï–°–¢–í–û: –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å Square –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–¥–∞
// üéØ –†–ï–ó–£–õ–¨–¢–ê–¢: –ü—Ä–∏–Ω—Ü–∏–ø –æ—Ç–∫—Ä—ã—Ç–æ—Å—Ç–∏/–∑–∞–∫—Ä—ã—Ç–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç
class Square implements Shape {
    constructor(private side: number) {}
    
    calculateArea(): number {
        return this.side * this.side;
    }
    
    calculatePerimeter(): number {
        return 4 * this.side;
    }
}

// ‚úÖ –ù–æ–≤–∞—è —Ñ–∏–≥—É—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–¥–∞
const _square = new Square(5);
calculator.calculate([_circle, _rectangle, _triangle, _square]);

export {}


