// ‚úÖ –•–û–†–û–®–û: –°–æ–±–ª—é–¥–µ–Ω–∏–µ ISP - —Ç–æ–Ω–∫–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –º–µ—Ç–æ–¥—ã
//
// üîÄ –û–°–ù–û–í–ù–ê–Ø –ò–î–ï–Ø ISP:
// 1. ‚úÖ –ö–õ–ò–ï–ù–¢–´ –ù–ï –ó–ê–í–ò–°–Ø–¢ –û–¢ –ú–ï–¢–û–î–û–í, –ö–û–¢–û–†–´–ï –ù–ï –ò–°–ü–û–õ–¨–ó–£–Æ–¢
//    - Circle —Ä–µ–∞–ª–∏–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ CircleShape —Å –Ω—É–∂–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏
//    - Rectangle —Ä–µ–∞–ª–∏–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ RectangleShape —Å –Ω—É–∂–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏
//
// 2. ‚úÖ –¢–û–ù–ö–ò–ï –°–ü–ï–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –ò–ù–¢–ï–†–§–ï–ô–°–´
//    - –ö–∞–∂–¥—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ–¥–Ω—É –æ–±–ª–∞—Å—Ç—å
//    - –ß–µ—Ç–∫–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
//
// 3. ‚úÖ –î–û–ë–†–û–í–û–õ–¨–ù–ê–Ø –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø –ù–£–ñ–ù–´–• –ú–ï–¢–û–î–û–í
//    - –ö–ª–∞—Å—Å—ã —Ä–µ–∞–ª–∏–∑—É—é—Ç —Ç–æ–ª—å–∫–æ –º–µ—Ç–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –∏–º–µ—é—Ç —Å–º—ã—Å–ª
//    - –ù–µ—Ç –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω—ã—Ö —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π
//
// –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê:
// 1. –¢–æ–Ω–∫–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã - —Å–æ–¥–µ—Ä–∂–∞—Ç —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–µ—Ç–æ–¥—ã
// 2. –î–æ–±—Ä–æ–≤–æ–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –∫–ª–∞—Å—Å—ã —Ä–µ–∞–ª–∏–∑—É—é—Ç —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
// 3. –°–æ–±–ª—é–¥–µ–Ω–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø–∞ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ - –∫–∞–∂–¥—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ–¥–Ω—É –æ–±–ª–∞—Å—Ç—å
// 4. –õ–µ–≥–∫–æ—Å—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - —Ç–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –º–µ—Ç–æ–¥—ã
// 5. –ì–∏–±–∫–æ—Å—Ç—å - –∫–ª–∞—Å—Å—ã –º–æ–≥—É—Ç —Ä–µ–∞–ª–∏–∑–æ–≤—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã

// ‚úÖ ISP: –ë–∞–∑–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤—Å–µ—Ö —Ñ–∏–≥—É—Ä - —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã
// üí° –ü–†–ï–ò–ú–£–©–ï–°–¢–í–û: –û–±—â–∏–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –≤—Å–µ—Ö —Ñ–∏–≥—É—Ä
// üéØ –†–ï–ó–£–õ–¨–¢–ê–¢: –°—Ç–∞–±–∏–ª—å–Ω–∞—è –æ—Å–Ω–æ–≤–∞ –¥–ª—è –≤—Å–µ—Ö —Ñ–∏–≥—É—Ä
interface Shape {
    getArea(): number;
    getPerimeter(): number;
    getInfo(): string;
}

// ‚úÖ ISP: –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∫—Ä—É–≥–∞ - —Ç–æ–ª—å–∫–æ –º–µ—Ç–æ–¥—ã, —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –∫—Ä—É–≥–∞
// üí° –ü–†–ï–ò–ú–£–©–ï–°–¢–í–û: –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –Ω—É–∂–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏
// üéØ –†–ï–ó–£–õ–¨–¢–ê–¢: Circle —Ä–µ–∞–ª–∏–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ –µ–º—É –Ω—É–∂–Ω–æ
interface CircleShape extends Shape {
    getDiametr(): number; // ‚úÖ –¢–æ–ª—å–∫–æ –¥–ª—è –∫—Ä—É–≥–∞
}

// ‚úÖ ISP: –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ - —Ç–æ–ª—å–∫–æ –º–µ—Ç–æ–¥—ã, —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
// üí° –ü–†–ï–ò–ú–£–©–ï–°–¢–í–û: –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –Ω—É–∂–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏
// üéØ –†–ï–ó–£–õ–¨–¢–ê–¢: Rectangle —Ä–µ–∞–ª–∏–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ –µ–º—É –Ω—É–∂–Ω–æ
interface RectangleShape extends Shape {
    getDiagonal(): number; // ‚úÖ –¢–æ–ª—å–∫–æ –¥–ª—è –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
}

// ‚úÖ ISP: –ö—Ä—É–≥ —Ä–µ–∞–ª–∏–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
// üí° –ü–†–ï–ò–ú–£–©–ï–°–¢–í–û: –ù–µ –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤—ã–≤–∞—Ç—å –Ω–µ–Ω—É–∂–Ω—ã–µ –º–µ—Ç–æ–¥—ã
// üéØ –†–ï–ó–£–õ–¨–¢–ê–¢: –ß–∏—Å—Ç–∞—è –∏ –ø–æ–Ω—è—Ç–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
class Circle implements CircleShape {
    constructor(private radius: number) {}

    getArea() {
        return Math.PI * this.radius * this.radius;
    }

    getPerimeter() {
        return 2 * Math.PI * this.radius;
    }

    getInfo(): string {
        return `Circle: radius=${this.radius}`;
    }

    getDiametr() {
       return this.radius * 2; // ‚úÖ –û—Å–º—ã—Å–ª–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –∫—Ä—É–≥–∞
    }
}

// ‚úÖ ISP: –ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ —Ä–µ–∞–ª–∏–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
// üí° –ü–†–ï–ò–ú–£–©–ï–°–¢–í–û: –ù–µ –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤—ã–≤–∞—Ç—å –Ω–µ–Ω—É–∂–Ω—ã–µ –º–µ—Ç–æ–¥—ã
// üéØ –†–ï–ó–£–õ–¨–¢–ê–¢: –ß–∏—Å—Ç–∞—è –∏ –ø–æ–Ω—è—Ç–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
class Rectangle implements RectangleShape {
    constructor(private width: number, private height: number) {}

    getArea() {
        return this.width * this.height;
    }

    getPerimeter() {
        return 2 * (this.width + this.height);
    }

    getInfo() {
        return `Rectangle: ${this.width}x${this.height}`;
    }

    getDiagonal() {
        return Math.sqrt(this.width * this.width + this.height * this.height); // ‚úÖ –û—Å–º—ã—Å–ª–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
    }
}

// ‚úÖ ISP: –§–∞–±—Ä–∏—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞—é—Ç –æ–±—ä–µ–∫—Ç—ã —Ç–æ–ª—å–∫–æ —Å –Ω—É–∂–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏
// üí° –ü–†–ï–ò–ú–£–©–ï–°–¢–í–û: –ö–∞–∂–¥—ã–π –æ–±—ä–µ–∫—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –ø–æ–ª—è
// üéØ –†–ï–ó–£–õ–¨–¢–ê–¢: –ù–µ—Ç –∏–∑–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
class IspGoodCreateShapeFactory {
     static getCircleData(radius: number) {
        const circle = new Circle(radius);
        return {
            area: circle.getArea(),
            perimeter: circle.getPerimeter(),
            info: circle.getInfo(),
            diameter: circle.getDiametr(), // ‚úÖ –¢–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –∫—Ä—É–≥–∞
        };
    }

    static getRectangleData(width: number, height: number) {
        const rectangle = new Rectangle(width, height);
        return {
            area: rectangle.getArea(),
            perimeter: rectangle.getPerimeter(),
            info: rectangle.getInfo(),
            diagonal: rectangle.getDiagonal(), // ‚úÖ –¢–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
        };
    }
}

// ‚úÖ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–†–ï–ò–ú–£–©–ï–°–¢–í: –ù–µ—Ç –∏–∑–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
// üí° –ü–†–ï–ò–ú–£–©–ï–°–¢–í–û: –ö–∞–∂–¥—ã–π –æ–±—ä–µ–∫—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –ø–æ–ª—è
// üéØ –†–ï–ó–£–õ–¨–¢–ê–¢: –ß–µ—Ç–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
const ispGoodCircleData1 = IspGoodCreateShapeFactory.getCircleData(10);
const ispGoodRectangleData1 = IspGoodCreateShapeFactory.getRectangleData(4, 6);

// ‚úÖ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø: –õ–µ–≥–∫–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ç–∏–ø–æ–≤
// üí° –ü–†–ï–ò–ú–£–©–ï–°–¢–í–û: –ú–æ–∂–Ω–æ –ª–µ–≥–∫–æ –¥–æ–±–∞–≤–∏—Ç—å Triangle —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
// üéØ –†–ï–ó–£–õ–¨–¢–ê–¢: –†–∞—Å—à–∏—Ä—è–µ–º–æ—Å—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
interface TriangleShape extends Shape {
    getHeight(): number; // ‚úÖ –¢–æ–ª—å–∫–æ –¥–ª—è —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞
}

class Triangle implements TriangleShape {
    constructor(private side1: number, private side2: number, private side3: number) {}
    
    getArea() {
        const s = (this.side1 + this.side2 + this.side3) / 2;
        return Math.sqrt(s * (s - this.side1) * (s - this.side2) * (s - this.side3));
    }
    
    getPerimeter() {
        return this.side1 + this.side2 + this.side3;
    }
    
    getInfo() {
        return `Triangle: ${this.side1},${this.side2},${this.side3}`;
    }
    
    getHeight() {
        return (2 * this.getArea()) / this.side1; // ‚úÖ –û—Å–º—ã—Å–ª–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞
    }
}

export {}





